"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/prompts";
exports.ids = ["pages/api/prompts"];
exports.modules = {

/***/ "(api-node)/./lib/auth-utils.js":
/*!***************************!*\
  !*** ./lib/auth-utils.js ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([bcryptjs__WEBPACK_IMPORTED_MODULE_0__]);\nbcryptjs__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/**\n * Hash a password using bcrypt\n * @param {string} password - Plain text password to hash\n * @returns {Promise<string>} - Hashed password\n */ const hashPassword = async (password)=>{\n    const salt = await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].genSalt(12);\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(password, salt);\n};\n/**\n * Verify a password against a hash\n * @param {string} password - Plain text password to check\n * @param {string} hash - Hashed password to compare against\n * @returns {Promise<boolean>} - True if password matches hash\n */ const verifyPassword = async (password, hash)=>{\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compare(password, hash);\n};\n/**\n * Generate a random token (e.g., for email confirmation, password reset)\n * @param {number} length - Length of the token\n * @returns {string} - Random token\n */ const generateToken = (length = 32)=>{\n    return crypto__WEBPACK_IMPORTED_MODULE_1___default().randomBytes(length).toString('hex');\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9hdXRoLXV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUE4QjtBQUNGO0FBRTVCOzs7O0NBSUMsR0FDTSxNQUFNRSxlQUFlLE9BQU9DO0lBQ2pDLE1BQU1DLE9BQU8sTUFBTUosd0RBQWMsQ0FBQztJQUNsQyxPQUFPQSxxREFBVyxDQUFDRyxVQUFVQztBQUMvQixFQUFFO0FBRUY7Ozs7O0NBS0MsR0FDTSxNQUFNRyxpQkFBaUIsT0FBT0osVUFBVUc7SUFDN0MsT0FBT04sd0RBQWMsQ0FBQ0csVUFBVUc7QUFDbEMsRUFBRTtBQUVGOzs7O0NBSUMsR0FDTSxNQUFNRyxnQkFBZ0IsQ0FBQ0MsU0FBUyxFQUFFO0lBQ3ZDLE9BQU9ULHlEQUFrQixDQUFDUyxRQUFRRSxRQUFRLENBQUM7QUFDN0MsRUFBRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxiYXVkaVxcT25lRHJpdmVcXERlc2t0b3BcXFByb21wdFByb1xcUHJvbXB0UHJvXFxsaWJcXGF1dGgtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbi8qKlxuICogSGFzaCBhIHBhc3N3b3JkIHVzaW5nIGJjcnlwdFxuICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIC0gUGxhaW4gdGV4dCBwYXNzd29yZCB0byBoYXNoXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSAtIEhhc2hlZCBwYXNzd29yZFxuICovXG5leHBvcnQgY29uc3QgaGFzaFBhc3N3b3JkID0gYXN5bmMgKHBhc3N3b3JkKSA9PiB7XG4gIGNvbnN0IHNhbHQgPSBhd2FpdCBiY3J5cHQuZ2VuU2FsdCgxMik7XG4gIHJldHVybiBiY3J5cHQuaGFzaChwYXNzd29yZCwgc2FsdCk7XG59O1xuXG4vKipcbiAqIFZlcmlmeSBhIHBhc3N3b3JkIGFnYWluc3QgYSBoYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgLSBQbGFpbiB0ZXh0IHBhc3N3b3JkIHRvIGNoZWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaCAtIEhhc2hlZCBwYXNzd29yZCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSAtIFRydWUgaWYgcGFzc3dvcmQgbWF0Y2hlcyBoYXNoXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJpZnlQYXNzd29yZCA9IGFzeW5jIChwYXNzd29yZCwgaGFzaCkgPT4ge1xuICByZXR1cm4gYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIGhhc2gpO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSB0b2tlbiAoZS5nLiwgZm9yIGVtYWlsIGNvbmZpcm1hdGlvbiwgcGFzc3dvcmQgcmVzZXQpXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gTGVuZ3RoIG9mIHRoZSB0b2tlblxuICogQHJldHVybnMge3N0cmluZ30gLSBSYW5kb20gdG9rZW5cbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlVG9rZW4gPSAobGVuZ3RoID0gMzIpID0+IHtcbiAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhsZW5ndGgpLnRvU3RyaW5nKCdoZXgnKTtcbn07Il0sIm5hbWVzIjpbImJjcnlwdCIsImNyeXB0byIsImhhc2hQYXNzd29yZCIsInBhc3N3b3JkIiwic2FsdCIsImdlblNhbHQiLCJoYXNoIiwidmVyaWZ5UGFzc3dvcmQiLCJjb21wYXJlIiwiZ2VuZXJhdGVUb2tlbiIsImxlbmd0aCIsInJhbmRvbUJ5dGVzIiwidG9TdHJpbmciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth-utils.js\n");

/***/ }),

/***/ "(api-node)/./lib/auth.js":
/*!*********************!*\
  !*** ./lib/auth.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAuthSession: () => (/* binding */ getAuthSession),\n/* harmony export */   withAuth: () => (/* binding */ withAuth),\n/* harmony export */   withAuthForMethods: () => (/* binding */ withAuthForMethods)\n/* harmony export */ });\n/* harmony import */ var next_auth_jwt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/jwt */ \"next-auth/jwt\");\n/* harmony import */ var next_auth_jwt__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_jwt__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Check if the request is authenticated\r\n * @param {Object} req - The request object\r\n * @returns {Promise<Object|null>} - The user session or null if not authenticated\r\n */ async function getAuthSession(req) {\n    return await (0,next_auth_jwt__WEBPACK_IMPORTED_MODULE_0__.getToken)({\n        req,\n        secret: process.env.NEXTAUTH_SECRET\n    });\n}\n/**\r\n * Higher-order function that creates an API handler that requires authentication\r\n * @param {Function} handler - The API handler to protect\r\n * @returns {Function} - The protected API handler\r\n */ function withAuth(handler) {\n    return async (req, res)=>{\n        const session = await getAuthSession(req);\n        if (!session) {\n            return res.status(401).json({\n                error: \"Unauthorized\"\n            });\n        }\n        // Add the session to the request object\n        req.session = session;\n        // Also add a user property for compatibility\n        req.user = {\n            id: session.sub || session.id,\n            name: session.name,\n            email: session.email\n        };\n        // Call the original handler\n        return handler(req, res);\n    };\n}\n/**\r\n * Higher-order function that optionally requires authentication for certain methods\r\n * @param {Function} handler - The API handler \r\n * @param {Array} protectedMethods - HTTP methods that require authentication (e.g., ['POST', 'PUT', 'DELETE'])\r\n * @returns {Function} - The conditionally protected API handler\r\n */ function withAuthForMethods(handler, protectedMethods = [\n    'POST',\n    'PUT',\n    'DELETE'\n]) {\n    return async (req, res)=>{\n        // Check if the current method requires authentication\n        if (protectedMethods.includes(req.method)) {\n            const session = await getAuthSession(req);\n            if (!session) {\n                return res.status(401).json({\n                    error: \"Unauthorized\"\n                });\n            }\n            // Add the session to the request object\n            req.session = session;\n            // Also add a user property for compatibility\n            req.user = {\n                id: session.sub || session.id,\n                name: session.name,\n                email: session.email\n            };\n        }\n        // Call the original handler\n        return handler(req, res);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9hdXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlDO0FBRXpDOzs7O0NBSUMsR0FDTSxlQUFlQyxlQUFlQyxHQUFHO0lBQ3RDLE9BQU8sTUFBTUYsdURBQVFBLENBQUM7UUFBRUU7UUFBS0MsUUFBUUMsUUFBUUMsR0FBRyxDQUFDQyxlQUFlO0lBQUM7QUFDbkU7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0MsU0FBU0MsT0FBTztJQUM5QixPQUFPLE9BQU9OLEtBQUtPO1FBQ2pCLE1BQU1DLFVBQVUsTUFBTVQsZUFBZUM7UUFFckMsSUFBSSxDQUFDUSxTQUFTO1lBQ1osT0FBT0QsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUFlO1FBQ3REO1FBRUEsd0NBQXdDO1FBQ3hDWCxJQUFJUSxPQUFPLEdBQUdBO1FBRWQsNkNBQTZDO1FBQzdDUixJQUFJWSxJQUFJLEdBQUc7WUFDVEMsSUFBSUwsUUFBUU0sR0FBRyxJQUFJTixRQUFRSyxFQUFFO1lBQzdCRSxNQUFNUCxRQUFRTyxJQUFJO1lBQ2xCQyxPQUFPUixRQUFRUSxLQUFLO1FBQ3RCO1FBRUEsNEJBQTRCO1FBQzVCLE9BQU9WLFFBQVFOLEtBQUtPO0lBQ3RCO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNNLFNBQVNVLG1CQUFtQlgsT0FBTyxFQUFFWSxtQkFBbUI7SUFBQztJQUFRO0lBQU87Q0FBUztJQUN0RixPQUFPLE9BQU9sQixLQUFLTztRQUNqQixzREFBc0Q7UUFDdEQsSUFBSVcsaUJBQWlCQyxRQUFRLENBQUNuQixJQUFJb0IsTUFBTSxHQUFHO1lBQ3pDLE1BQU1aLFVBQVUsTUFBTVQsZUFBZUM7WUFFckMsSUFBSSxDQUFDUSxTQUFTO2dCQUNaLE9BQU9ELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7b0JBQUVDLE9BQU87Z0JBQWU7WUFDdEQ7WUFFQSx3Q0FBd0M7WUFDeENYLElBQUlRLE9BQU8sR0FBR0E7WUFFZCw2Q0FBNkM7WUFDN0NSLElBQUlZLElBQUksR0FBRztnQkFDVEMsSUFBSUwsUUFBUU0sR0FBRyxJQUFJTixRQUFRSyxFQUFFO2dCQUM3QkUsTUFBTVAsUUFBUU8sSUFBSTtnQkFDbEJDLE9BQU9SLFFBQVFRLEtBQUs7WUFDdEI7UUFDRjtRQUVBLDRCQUE0QjtRQUM1QixPQUFPVixRQUFRTixLQUFLTztJQUN0QjtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGJhdWRpXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvbXB0UHJvXFxQcm9tcHRQcm9cXGxpYlxcYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRUb2tlbiB9IGZyb20gXCJuZXh0LWF1dGgvand0XCI7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhlIHJlcXVlc3QgaXMgYXV0aGVudGljYXRlZFxyXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxIC0gVGhlIHJlcXVlc3Qgb2JqZWN0XHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdHxudWxsPn0gLSBUaGUgdXNlciBzZXNzaW9uIG9yIG51bGwgaWYgbm90IGF1dGhlbnRpY2F0ZWRcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBdXRoU2Vzc2lvbihyZXEpIHtcclxuICByZXR1cm4gYXdhaXQgZ2V0VG9rZW4oeyByZXEsIHNlY3JldDogcHJvY2Vzcy5lbnYuTkVYVEFVVEhfU0VDUkVUIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogSGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhbiBBUEkgaGFuZGxlciB0aGF0IHJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBUaGUgQVBJIGhhbmRsZXIgdG8gcHJvdGVjdFxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IC0gVGhlIHByb3RlY3RlZCBBUEkgaGFuZGxlclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhBdXRoKGhhbmRsZXIpIHtcclxuICByZXR1cm4gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgZ2V0QXV0aFNlc3Npb24ocmVxKTtcclxuICAgIFxyXG4gICAgaWYgKCFzZXNzaW9uKSB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiBcIlVuYXV0aG9yaXplZFwiIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBBZGQgdGhlIHNlc3Npb24gdG8gdGhlIHJlcXVlc3Qgb2JqZWN0XHJcbiAgICByZXEuc2Vzc2lvbiA9IHNlc3Npb247XHJcbiAgICBcclxuICAgIC8vIEFsc28gYWRkIGEgdXNlciBwcm9wZXJ0eSBmb3IgY29tcGF0aWJpbGl0eVxyXG4gICAgcmVxLnVzZXIgPSB7XHJcbiAgICAgIGlkOiBzZXNzaW9uLnN1YiB8fCBzZXNzaW9uLmlkLFxyXG4gICAgICBuYW1lOiBzZXNzaW9uLm5hbWUsXHJcbiAgICAgIGVtYWlsOiBzZXNzaW9uLmVtYWlsXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBDYWxsIHRoZSBvcmlnaW5hbCBoYW5kbGVyXHJcbiAgICByZXR1cm4gaGFuZGxlcihyZXEsIHJlcyk7XHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IG9wdGlvbmFsbHkgcmVxdWlyZXMgYXV0aGVudGljYXRpb24gZm9yIGNlcnRhaW4gbWV0aG9kc1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gVGhlIEFQSSBoYW5kbGVyIFxyXG4gKiBAcGFyYW0ge0FycmF5fSBwcm90ZWN0ZWRNZXRob2RzIC0gSFRUUCBtZXRob2RzIHRoYXQgcmVxdWlyZSBhdXRoZW50aWNhdGlvbiAoZS5nLiwgWydQT1NUJywgJ1BVVCcsICdERUxFVEUnXSlcclxuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIFRoZSBjb25kaXRpb25hbGx5IHByb3RlY3RlZCBBUEkgaGFuZGxlclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhBdXRoRm9yTWV0aG9kcyhoYW5kbGVyLCBwcm90ZWN0ZWRNZXRob2RzID0gWydQT1NUJywgJ1BVVCcsICdERUxFVEUnXSkge1xyXG4gIHJldHVybiBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IG1ldGhvZCByZXF1aXJlcyBhdXRoZW50aWNhdGlvblxyXG4gICAgaWYgKHByb3RlY3RlZE1ldGhvZHMuaW5jbHVkZXMocmVxLm1ldGhvZCkpIHtcclxuICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGdldEF1dGhTZXNzaW9uKHJlcSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIXNlc3Npb24pIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogXCJVbmF1dGhvcml6ZWRcIiB9KTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gQWRkIHRoZSBzZXNzaW9uIHRvIHRoZSByZXF1ZXN0IG9iamVjdFxyXG4gICAgICByZXEuc2Vzc2lvbiA9IHNlc3Npb247XHJcbiAgICAgIFxyXG4gICAgICAvLyBBbHNvIGFkZCBhIHVzZXIgcHJvcGVydHkgZm9yIGNvbXBhdGliaWxpdHlcclxuICAgICAgcmVxLnVzZXIgPSB7XHJcbiAgICAgICAgaWQ6IHNlc3Npb24uc3ViIHx8IHNlc3Npb24uaWQsXHJcbiAgICAgICAgbmFtZTogc2Vzc2lvbi5uYW1lLFxyXG4gICAgICAgIGVtYWlsOiBzZXNzaW9uLmVtYWlsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENhbGwgdGhlIG9yaWdpbmFsIGhhbmRsZXJcclxuICAgIHJldHVybiBoYW5kbGVyKHJlcSwgcmVzKTtcclxuICB9O1xyXG59Il0sIm5hbWVzIjpbImdldFRva2VuIiwiZ2V0QXV0aFNlc3Npb24iLCJyZXEiLCJzZWNyZXQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVEFVVEhfU0VDUkVUIiwid2l0aEF1dGgiLCJoYW5kbGVyIiwicmVzIiwic2Vzc2lvbiIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsInVzZXIiLCJpZCIsInN1YiIsIm5hbWUiLCJlbWFpbCIsIndpdGhBdXRoRm9yTWV0aG9kcyIsInByb3RlY3RlZE1ldGhvZHMiLCJpbmNsdWRlcyIsIm1ldGhvZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth.js\n");

/***/ }),

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPromptToCollection: () => (/* binding */ addPromptToCollection),\n/* harmony export */   addTeamMember: () => (/* binding */ addTeamMember),\n/* harmony export */   createCollection: () => (/* binding */ createCollection),\n/* harmony export */   createComment: () => (/* binding */ createComment),\n/* harmony export */   createPrompt: () => (/* binding */ createPrompt),\n/* harmony export */   createTeam: () => (/* binding */ createTeam),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   deleteCollection: () => (/* binding */ deleteCollection),\n/* harmony export */   deleteComment: () => (/* binding */ deleteComment),\n/* harmony export */   deletePrompt: () => (/* binding */ deletePrompt),\n/* harmony export */   deleteTeam: () => (/* binding */ deleteTeam),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   getAllCollections: () => (/* binding */ getAllCollections),\n/* harmony export */   getAllPrompts: () => (/* binding */ getAllPrompts),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getCollectionById: () => (/* binding */ getCollectionById),\n/* harmony export */   getCommentsByPromptId: () => (/* binding */ getCommentsByPromptId),\n/* harmony export */   getPromptById: () => (/* binding */ getPromptById),\n/* harmony export */   getTeamById: () => (/* binding */ getTeamById),\n/* harmony export */   getTeamsByUserId: () => (/* binding */ getTeamsByUserId),\n/* harmony export */   getUserByEmail: () => (/* binding */ getUserByEmail),\n/* harmony export */   getUserById: () => (/* binding */ getUserById),\n/* harmony export */   removePromptFromCollection: () => (/* binding */ removePromptFromCollection),\n/* harmony export */   removeTeamMember: () => (/* binding */ removeTeamMember),\n/* harmony export */   updateCollection: () => (/* binding */ updateCollection),\n/* harmony export */   updateComment: () => (/* binding */ updateComment),\n/* harmony export */   updatePrompt: () => (/* binding */ updatePrompt),\n/* harmony export */   updateTeam: () => (/* binding */ updateTeam),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n/* harmony import */ var _mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mongodb */ \"(api-node)/./lib/mongodb.js\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth-utils */ \"(api-node)/./lib/auth-utils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_utils__WEBPACK_IMPORTED_MODULE_2__]);\n_auth_utils__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n // Assuming auth-utils handles password hashing\n/**\r\n * Helper function to get the database and collections.\r\n */ async function getCollections() {\n    const { db } = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.connectToDatabase)();\n    return {\n        users: db.collection('users'),\n        prompts: db.collection('prompts'),\n        collections: db.collection('collections'),\n        teams: db.collection('teams'),\n        comments: db.collection('comments')\n    };\n}\n/**\r\n * Helper function to convert string ID to ObjectId.\r\n * Returns null if the ID is invalid.\r\n */ function toObjectId(id) {\n    if (!id || !mongodb__WEBPACK_IMPORTED_MODULE_1__.ObjectId.isValid(id)) {\n        return null;\n    }\n    try {\n        return new mongodb__WEBPACK_IMPORTED_MODULE_1__.ObjectId(id);\n    } catch (error) {\n        // Handle potential errors during ObjectId creation if needed\n        console.error(\"Error creating ObjectId:\", error);\n        return null;\n    }\n}\n// --- Prompt Functions ---\nconst getAllPrompts = async (filter = {}, options = {})=>{\n    try {\n        const { prompts } = await getCollections();\n        const cursor = prompts.find(filter);\n        // Add sorting if specified in options\n        if (options.sort) {\n            cursor.sort(options.sort);\n        } else {\n            cursor.sort({\n                createdAt: -1\n            }); // Default sort: newest first\n        }\n        // Add limit if specified\n        if (options.limit) {\n            cursor.limit(options.limit);\n        }\n        // Add skip for pagination if specified\n        if (options.skip) {\n            cursor.skip(options.skip);\n        }\n        const allPrompts = await cursor.toArray();\n        return allPrompts;\n    } catch (error) {\n        console.error(\"Error fetching all prompts:\", error);\n        throw new Error(\"Database error while fetching prompts.\");\n    }\n};\nconst getPromptById = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { prompts } = await getCollections();\n        const prompt = await prompts.findOne({\n            _id: objectId\n        });\n        return prompt;\n    } catch (error) {\n        console.error(\"Error fetching prompt by ID:\", error);\n        throw new Error(\"Database error while fetching prompt.\");\n    }\n};\nconst createPrompt = async (promptData)=>{\n    try {\n        const { prompts } = await getCollections();\n        const now = new Date();\n        const newPrompt = {\n            title: promptData.title,\n            content: promptData.content,\n            description: promptData.description || '',\n            tags: promptData.tags || [],\n            aiPlatform: promptData.aiPlatform || 'ChatGPT',\n            rating: promptData.rating || 0,\n            usageCount: promptData.usageCount || 0,\n            successRate: promptData.successRate || 0,\n            visibility: promptData.visibility || 'private',\n            userId: promptData.userId,\n            createdBy: promptData.createdBy,\n            teamId: promptData.teamId ? toObjectId(promptData.teamId) : null,\n            createdAt: now,\n            updatedAt: now\n        };\n        const result = await prompts.insertOne(newPrompt);\n        return {\n            ...newPrompt,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating prompt:\", error);\n        throw new Error(\"Database error while creating prompt.\");\n    }\n};\nconst updatePrompt = async (id, promptData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { prompts } = await getCollections();\n        const updateDoc = {\n            $set: {}\n        };\n        // Add fields to update only if they are provided\n        for (const key of [\n            'title',\n            'content',\n            'description',\n            'tags',\n            'aiPlatform',\n            'rating',\n            'usageCount',\n            'successRate',\n            'visibility',\n            'createdBy'\n        ]){\n            if (promptData[key] !== undefined) {\n                updateDoc.$set[key] = promptData[key];\n            }\n        }\n        // Handle teamId separately - allow setting to null or a valid ObjectId\n        if (promptData.teamId !== undefined) {\n            updateDoc.$set.teamId = promptData.teamId ? toObjectId(promptData.teamId) : null;\n        }\n        // Don't update userId or createdAt\n        updateDoc.$set.updatedAt = new Date();\n        if (Object.keys(updateDoc.$set).length === 1) {\n            // Maybe skip update if only timestamp changes?\n            return prompts.findOne({\n                _id: objectId\n            }); // Return current doc\n        }\n        const result = await prompts.updateOne({\n            _id: objectId\n        }, updateDoc);\n        if (result.matchedCount === 0) {\n            return null; // Prompt not found\n        }\n        const updatedPrompt = await prompts.findOne({\n            _id: objectId\n        });\n        return updatedPrompt;\n    } catch (error) {\n        console.error(\"Error updating prompt:\", error);\n        throw new Error(\"Database error while updating prompt.\");\n    }\n};\nconst deletePrompt = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { prompts } = await getCollections();\n        // TODO: Consider deleting associated comments or handling dependencies\n        const result = await prompts.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting prompt:\", error);\n        throw new Error(\"Database error while deleting prompt.\");\n    }\n};\n// TODO: Implement searchPrompts using MongoDB's text search or complex filtering\n// export const searchPrompts = async (query, options = {}) => { ... };\n// --- Collection Functions ---\nconst getAllCollections = async (filter = {}, options = {})=>{\n    try {\n        const { collections } = await getCollections();\n        const cursor = collections.find(filter);\n        if (options.sort) cursor.sort(options.sort);\n        if (options.limit) cursor.limit(options.limit);\n        if (options.skip) cursor.skip(options.skip);\n        const allCollections = await cursor.toArray();\n        return allCollections;\n    } catch (error) {\n        console.error(\"Error fetching all collections:\", error);\n        throw new Error(\"Database error while fetching collections.\");\n    }\n};\nconst getCollectionById = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { collections } = await getCollections();\n        // Optionally use aggregation to populate prompts if needed immediately\n        const collection = await collections.findOne({\n            _id: objectId\n        });\n        return collection;\n    } catch (error) {\n        console.error(\"Error fetching collection by ID:\", error);\n        throw new Error(\"Database error while fetching collection.\");\n    }\n};\nconst createCollection = async (collectionData)=>{\n    try {\n        const { collections } = await getCollections();\n        const now = new Date();\n        const newCollection = {\n            name: collectionData.name,\n            description: collectionData.description || '',\n            userId: collectionData.userId,\n            prompts: [],\n            createdAt: now,\n            updatedAt: now\n        };\n        const result = await collections.insertOne(newCollection);\n        return {\n            ...newCollection,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating collection:\", error);\n        throw new Error(\"Database error while creating collection.\");\n    }\n};\nconst updateCollection = async (id, collectionData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { collections } = await getCollections();\n        const updateDoc = {\n            $set: {}\n        };\n        if (collectionData.name !== undefined) updateDoc.$set.name = collectionData.name;\n        if (collectionData.description !== undefined) updateDoc.$set.description = collectionData.description;\n        // Note: Managing the 'prompts' array (add/remove) typically done via separate functions\n        updateDoc.$set.updatedAt = new Date();\n        if (Object.keys(updateDoc.$set).length > 1) {\n            const result = await collections.updateOne({\n                _id: objectId\n            }, updateDoc);\n            if (result.matchedCount === 0) return null;\n        }\n        const updatedCollection = await collections.findOne({\n            _id: objectId\n        });\n        return updatedCollection;\n    } catch (error) {\n        console.error(\"Error updating collection:\", error);\n        throw new Error(\"Database error while updating collection.\");\n    }\n};\nconst deleteCollection = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { collections } = await getCollections();\n        const result = await collections.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting collection:\", error);\n        throw new Error(\"Database error while deleting collection.\");\n    }\n};\nconst addPromptToCollection = async (collectionId, promptId)=>{\n    const collObjectId = toObjectId(collectionId);\n    const promptObjectId = toObjectId(promptId);\n    if (!collObjectId || !promptObjectId) return null;\n    try {\n        const { collections } = await getCollections();\n        // Use $addToSet to add the prompt's ObjectId to the array if not already present\n        const result = await collections.updateOne({\n            _id: collObjectId\n        }, {\n            $addToSet: {\n                prompts: promptObjectId\n            },\n            $set: {\n                updatedAt: new Date()\n            }\n        });\n        if (result.matchedCount === 0) return null; // Collection not found\n        const updatedCollection = await collections.findOne({\n            _id: collObjectId\n        });\n        return updatedCollection;\n    } catch (error) {\n        console.error(\"Error adding prompt to collection:\", error);\n        throw new Error(\"Database error while adding prompt to collection.\");\n    }\n};\nconst removePromptFromCollection = async (collectionId, promptId)=>{\n    const collObjectId = toObjectId(collectionId);\n    const promptObjectId = toObjectId(promptId);\n    if (!collObjectId || !promptObjectId) return null;\n    try {\n        const { collections } = await getCollections();\n        // Use $pull to remove the prompt's ObjectId from the array\n        const result = await collections.updateOne({\n            _id: collObjectId\n        }, {\n            $pull: {\n                prompts: promptObjectId\n            },\n            $set: {\n                updatedAt: new Date()\n            }\n        });\n        if (result.matchedCount === 0) return null; // Collection not found\n        const updatedCollection = await collections.findOne({\n            _id: collObjectId\n        });\n        return updatedCollection;\n    } catch (error) {\n        console.error(\"Error removing prompt from collection:\", error);\n        throw new Error(\"Database error while removing prompt from collection.\");\n    }\n};\n// --- User Functions ---\n// Note: These are basic implementations. Authentication libraries often handle user management.\nconst getAllUsers = async (filter = {}, options = {})=>{\n    try {\n        const { users } = await getCollections();\n        // Exclude password field by default\n        const cursor = users.find(filter, {\n            projection: {\n                password: 0\n            }\n        });\n        if (options.sort) cursor.sort(options.sort);\n        if (options.limit) cursor.limit(options.limit);\n        if (options.skip) cursor.skip(options.skip);\n        const allUsers = await cursor.toArray();\n        return allUsers;\n    } catch (error) {\n        console.error(\"Error fetching all users:\", error);\n        throw new Error(\"Database error while fetching users.\");\n    }\n};\nconst getUserById = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { users } = await getCollections();\n        const user = await users.findOne({\n            _id: objectId\n        }, {\n            projection: {\n                password: 0\n            }\n        });\n        return user;\n    } catch (error) {\n        console.error(\"Error fetching user by ID:\", error);\n        throw new Error(\"Database error while fetching user.\");\n    }\n};\nconst getUserByEmail = async (email)=>{\n    if (!email) return null;\n    try {\n        const { users } = await getCollections();\n        // Find user by email, but DO include password for authentication checks\n        const user = await users.findOne({\n            email: email.toLowerCase()\n        });\n        return user;\n    } catch (error) {\n        console.error(\"Error fetching user by email:\", error);\n        throw new Error(\"Database error while fetching user.\");\n    }\n};\nconst createUser = async (userData)=>{\n    if (!userData.email || !userData.password) {\n        throw new Error(\"Email and password are required to create a user.\");\n    }\n    try {\n        const { users } = await getCollections();\n        const now = new Date();\n        // Check if user already exists\n        const existingUser = await users.findOne({\n            email: userData.email.toLowerCase()\n        });\n        if (existingUser) {\n            throw new Error(\"User with this email already exists.\");\n        }\n        // Hash password before storing\n        const hashedPassword = await (0,_auth_utils__WEBPACK_IMPORTED_MODULE_2__.hashPassword)(userData.password);\n        const newUser = {\n            name: userData.name || '',\n            email: userData.email.toLowerCase(),\n            password: hashedPassword,\n            image: userData.image || null,\n            // Add roles or other fields as needed\n            createdAt: now,\n            updatedAt: now\n        };\n        const result = await users.insertOne(newUser);\n        // Return user data without the password hash\n        const { password, ...userWithoutPassword } = newUser;\n        return {\n            ...userWithoutPassword,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating user:\", error);\n        // Rethrow specific errors or a generic one\n        if (error.message === \"User with this email already exists.\") {\n            throw error;\n        }\n        throw new Error(\"Database error while creating user.\");\n    }\n};\nconst updateUser = async (id, userData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { users } = await getCollections();\n        const updateDoc = {\n            $set: {}\n        };\n        if (userData.name !== undefined) updateDoc.$set.name = userData.name;\n        if (userData.image !== undefined) updateDoc.$set.image = userData.image;\n        // Add other updatable fields (e.g., roles)\n        // Handle email change carefully\n        if (userData.email && typeof userData.email === 'string') {\n            const newEmail = userData.email.toLowerCase();\n            const existingUser = await users.findOne({\n                email: newEmail\n            });\n            // Allow update only if email doesn't exist OR belongs to the current user\n            if (existingUser && !existingUser._id.equals(objectId)) {\n                throw new Error(\"Email address is already in use.\");\n            }\n            updateDoc.$set.email = newEmail;\n        }\n        // Do not allow password update through this general function\n        // Create a specific changePassword function if needed\n        updateDoc.$set.updatedAt = new Date();\n        if (Object.keys(updateDoc.$set).length > 1) {\n            const result = await users.updateOne({\n                _id: objectId\n            }, updateDoc);\n            if (result.matchedCount === 0) return null;\n        }\n        const updatedUser = await users.findOne({\n            _id: objectId\n        }, {\n            projection: {\n                password: 0\n            }\n        });\n        return updatedUser;\n    } catch (error) {\n        console.error(\"Error updating user:\", error);\n        if (error.message === \"Email address is already in use.\") {\n            throw error;\n        }\n        throw new Error(\"Database error while updating user.\");\n    }\n};\nconst deleteUser = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { users } = await getCollections();\n        // TODO: Handle related data cleanup (e.g., reassign prompts?)\n        const result = await users.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting user:\", error);\n        throw new Error(\"Database error while deleting user.\");\n    }\n};\n// --- Team Functions (already refactored) ---\nconst getTeamById = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null; // Invalid ID format\n    try {\n        const { teams } = await getCollections();\n        // Fetch team and potentially populate member details if needed later\n        const team = await teams.findOne({\n            _id: objectId\n        });\n        // Optionally convert member userIds back to string if needed for frontend\n        // if (team && team.members) {\n        //   team.members = team.members.map(member => ({ ...member, userId: member.userId.toString() }));\n        // }\n        // Convert main _id to string\n        // if (team) team._id = team._id.toString();\n        return team; // Returns the team document or null if not found\n    } catch (error) {\n        console.error(\"Error fetching team by ID:\", error);\n        throw new Error(\"Database error while fetching team.\");\n    }\n};\nconst getTeamsByUserId = async (userId)=>{\n    // Ensure userId is treated as a string for matching unless it's clearly an ObjectId\n    const userIdString = userId.toString();\n    const userObjectId = toObjectId(userId); // Attempt conversion\n    try {\n        const { teams } = await getCollections();\n        // Find teams where the user is the owner (userId field)\n        // OR the user is in the members array (assuming member.userId is stored as string)\n        const query = {\n            'members.userId': userIdString\n        };\n        // If the original userId was *also* the ownerId field, add that check\n        // This depends on how owner `userId` is stored (string vs ObjectId)\n        // Let's assume owner `userId` might match the string ID from session\n        const ownerQuery = {\n            userId: userIdString\n        };\n        // Combine queries\n        const finalQuery = {\n            $or: [\n                query,\n                ownerQuery\n            ]\n        };\n        // If the userId *was* a valid ObjectId, also check for ObjectId matches \n        // (in case some IDs are stored as ObjectIds)\n        if (userObjectId) {\n            finalQuery.$or.push({\n                'members.userId': userObjectId\n            });\n            finalQuery.$or.push({\n                userId: userObjectId\n            });\n        }\n        const userTeams = await teams.find(finalQuery).toArray();\n        return userTeams;\n    } catch (error) {\n        console.error(\"Error fetching teams by user ID:\", error);\n        throw new Error(\"Database error while fetching user's teams.\");\n    }\n};\nconst createTeam = async (teamData)=>{\n    try {\n        const { teams, users } = await getCollections();\n        const now = new Date();\n        const ownerUserId = teamData.userId; // Assume this is the string ID from session\n        // Fetch owner's name\n        let ownerName = 'Owner'; // Default\n        const ownerUser = await users.findOne({\n            _id: toObjectId(ownerUserId)\n        }, {\n            projection: {\n                name: 1\n            }\n        });\n        if (ownerUser && ownerUser.name) {\n            ownerName = ownerUser.name;\n        }\n        const newTeam = {\n            name: teamData.name,\n            description: teamData.description || '',\n            userId: ownerUserId,\n            members: [],\n            createdAt: now,\n            updatedAt: now\n        };\n        // Add creator as the owner\n        newTeam.members.push({\n            userId: ownerUserId,\n            role: 'owner',\n            joinedAt: now,\n            name: ownerName // Add owner's name\n        });\n        const result = await teams.insertOne(newTeam);\n        return {\n            ...newTeam,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating team:\", error);\n        throw new Error(\"Database error while creating team.\");\n    }\n};\nconst updateTeam = async (id, teamData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { teams } = await getCollections();\n        const updateDoc = {\n            $set: {}\n        };\n        if (teamData.name !== undefined) updateDoc.$set.name = teamData.name;\n        if (teamData.description !== undefined) updateDoc.$set.description = teamData.description;\n        updateDoc.$set.updatedAt = new Date();\n        if (Object.keys(updateDoc.$set).length > 1) {\n            const result = await teams.updateOne({\n                _id: objectId\n            }, updateDoc);\n            if (result.matchedCount === 0) return null;\n        }\n        const updatedTeam = await teams.findOne({\n            _id: objectId\n        });\n        return updatedTeam;\n    } catch (error) {\n        console.error(\"Error updating team:\", error);\n        throw new Error(\"Database error while updating team.\");\n    }\n};\nconst deleteTeam = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { teams } = await getCollections();\n        // TODO: Handle related data cleanup (e.g., prompts belonging to team?)\n        const result = await teams.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting team:\", error);\n        throw new Error(\"Database error while deleting team.\");\n    }\n};\nconst addTeamMember = async (teamId, memberData)=>{\n    const teamObjectId = toObjectId(teamId);\n    if (!teamObjectId) return null;\n    if (!memberData || !memberData.userId) throw new Error(\"Member user ID is required.\");\n    const memberUserId = memberData.userId; // Assume string ID from request\n    try {\n        const { teams, users } = await getCollections();\n        const now = new Date();\n        // Fetch member's name\n        let memberName = 'Member'; // Default\n        const memberUser = await users.findOne({\n            _id: toObjectId(memberUserId)\n        }, {\n            projection: {\n                name: 1\n            }\n        });\n        if (memberUser && memberUser.name) {\n            memberName = memberUser.name;\n        }\n        const memberRecord = {\n            userId: memberUserId,\n            role: memberData.role || 'member',\n            joinedAt: now,\n            name: memberName // Add member's name\n        };\n        // Check if user is already a member (using the string ID)\n        const team = await teams.findOne({\n            _id: teamObjectId,\n            'members.userId': memberUserId\n        });\n        if (team) {\n            console.log(\"User is already a member of this team.\");\n            return team; // Already a member\n        }\n        // Use $addToSet (or $push if duplicates are impossible/undesired)\n        const result = await teams.updateOne({\n            _id: teamObjectId\n        }, {\n            $push: {\n                members: memberRecord\n            },\n            $set: {\n                updatedAt: now\n            }\n        });\n        if (result.matchedCount === 0) return null;\n        const updatedTeam = await teams.findOne({\n            _id: teamObjectId\n        });\n        return updatedTeam;\n    } catch (error) {\n        console.error(\"Error adding team member:\", error);\n        throw new Error(\"Database error while adding team member.\");\n    }\n};\nconst removeTeamMember = async (teamId, userIdToRemove)=>{\n    const teamObjectId = toObjectId(teamId);\n    if (!teamObjectId) return null;\n    if (!userIdToRemove) throw new Error(\"User ID to remove is required.\");\n    const memberUserIdString = userIdToRemove.toString();\n    try {\n        const { teams } = await getCollections();\n        const now = new Date();\n        // Find the team first to check if the user being removed is the owner\n        const team = await teams.findOne({\n            _id: teamObjectId\n        });\n        if (!team) return null; // Team not found\n        const memberToRemove = team.members.find((m)=>m.userId === memberUserIdString);\n        if (!memberToRemove) {\n            // console.log(\"Member not found in team.\");\n            return team; // Member not found, return current team state\n        }\n        // Prevent removing the owner\n        if (memberToRemove.role === 'owner') {\n            throw new Error(\"Cannot remove the team owner.\");\n        }\n        // Use $pull to remove the member by userId (string match)\n        const result = await teams.updateOne({\n            _id: teamObjectId\n        }, {\n            $pull: {\n                members: {\n                    userId: memberUserIdString\n                }\n            },\n            $set: {\n                updatedAt: now\n            }\n        });\n        if (result.modifiedCount === 0) {\n            // Should not happen if member was found, but handle gracefully\n            console.log(\"Pull operation did not modify the document.\");\n        }\n        const updatedTeam = await teams.findOne({\n            _id: teamObjectId\n        });\n        return updatedTeam;\n    } catch (error) {\n        console.error(\"Error removing team member:\", error);\n        if (error.message === \"Cannot remove the team owner.\") {\n            throw error;\n        }\n        throw new Error(\"Database error while removing team member.\");\n    }\n};\n// TODO: Implement updateTeamMember role if needed\n// --- Comment Functions ---\nconst getCommentsByPromptId = async (promptId)=>{\n    const promptObjectId = toObjectId(promptId);\n    if (!promptObjectId) return [];\n    try {\n        const { comments } = await getCollections();\n        // Fetch comments and sort by creation date (newest first)\n        const promptComments = await comments.find({\n            promptId: promptObjectId\n        }).sort({\n            createdAt: -1\n        }).toArray();\n        return promptComments;\n    } catch (error) {\n        console.error(\"Error fetching comments by prompt ID:\", error);\n        throw new Error(\"Database error while fetching comments.\");\n    }\n};\nconst createComment = async (commentData)=>{\n    if (!commentData.promptId || !commentData.userId || !commentData.content) {\n        throw new Error(\"Prompt ID, User ID, and content are required for comments.\");\n    }\n    const promptObjectId = toObjectId(commentData.promptId);\n    // Assuming userId is passed as string from session\n    const userIdString = commentData.userId.toString();\n    if (!promptObjectId) {\n        throw new Error(\"Invalid Prompt ID format for comment.\");\n    }\n    try {\n        const { comments, users } = await getCollections();\n        const now = new Date();\n        // Fetch commenter's name\n        let createdByName = 'User'; // Default\n        const commenterUser = await users.findOne({\n            _id: toObjectId(userIdString)\n        }, {\n            projection: {\n                name: 1\n            }\n        });\n        if (commenterUser && commenterUser.name) {\n            createdByName = commenterUser.name;\n        }\n        const newComment = {\n            promptId: promptObjectId,\n            userId: userIdString,\n            content: commentData.content,\n            createdBy: createdByName,\n            createdAt: now,\n            updatedAt: now\n        };\n        const result = await comments.insertOne(newComment);\n        return {\n            ...newComment,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating comment:\", error);\n        throw new Error(\"Database error while creating comment.\");\n    }\n};\nconst updateComment = async (id, commentData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    if (!commentData.content) {\n        throw new Error(\"Comment content is required for update.\");\n    }\n    try {\n        const { comments } = await getCollections();\n        const updateDoc = {\n            $set: {\n                content: commentData.content,\n                updatedAt: new Date()\n            }\n        };\n        const result = await comments.updateOne({\n            _id: objectId\n        }, updateDoc);\n        if (result.matchedCount === 0) return null;\n        const updatedComment = await comments.findOne({\n            _id: objectId\n        });\n        return updatedComment;\n    } catch (error) {\n        console.error(\"Error updating comment:\", error);\n        throw new Error(\"Database error while updating comment.\");\n    }\n};\nconst deleteComment = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { comments } = await getCollections();\n        const result = await comments.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting comment:\", error);\n        throw new Error(\"Database error while deleting comment.\");\n    }\n}; // Remove the old in-memory data and initialization logic\n /*\r\nlet prompts = [];\r\nlet collections = [];\r\nlet users = [];\r\nlet teams = [];\r\nlet comments = [];\r\nlet promptIdCounter = 1;\r\nlet collectionIdCounter = 1;\r\nlet userIdCounter = 1;\r\nlet teamIdCounter = 1;\r\nlet commentIdCounter = 1;\r\n\r\n// All old functions like:\r\nexport const getAllPrompts = () => { ... };\r\n// ... etc.\r\n\r\n// Initialize with some sample data - in real app, this would be loaded from database\r\nexport const initializeDb = async () => { ... };\r\n\r\n// Call initialize when imported\r\n(async () => { ... })();\r\n*/ \n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./lib/mongodb.js":
/*!************************!*\
  !*** ./lib/mongodb.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabaseConnection: () => (/* binding */ closeDatabaseConnection),\n/* harmony export */   connectToDatabase: () => (/* binding */ connectToDatabase),\n/* harmony export */   getCollection: () => (/* binding */ getCollection)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst uri = process.env.MONGODB_URI;\nconst dbName = process.env.MONGODB_DB;\nif (!uri) {\n    throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\nif (!dbName) {\n    throw new Error('Please define the MONGODB_DB environment variable inside .env.local');\n}\nlet cachedClient = null;\nlet cachedDb = null;\n/**\r\n * Connects to the MongoDB database and returns the client and db instances.\r\n * Caches the connection to avoid reconnecting on every request in development.\r\n */ async function connectToDatabase() {\n    if (cachedClient && cachedDb) {\n        return {\n            client: cachedClient,\n            db: cachedDb\n        };\n    }\n    try {\n        const client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(uri, {\n        });\n        await client.connect();\n        const db = client.db(dbName);\n        console.log(\"Successfully connected to MongoDB.\");\n        cachedClient = client;\n        cachedDb = db;\n        return {\n            client,\n            db\n        };\n    } catch (error) {\n        console.error(\"Failed to connect to MongoDB\", error);\n        throw new Error(\"Could not connect to database.\");\n    }\n}\n// Optional: Helper to close the connection (useful for scripts or tests)\nasync function closeDatabaseConnection() {\n    if (cachedClient) {\n        await cachedClient.close();\n        cachedClient = null;\n        cachedDb = null;\n        console.log(\"MongoDB connection closed.\");\n    }\n}\n// Helper function to get collection references\nasync function getCollection(collectionName) {\n    const { db } = await connectToDatabase();\n    return db.collection(collectionName);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9tb25nb2RiLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNDO0FBRXRDLE1BQU1DLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0MsV0FBVztBQUNuQyxNQUFNQyxTQUFTSCxRQUFRQyxHQUFHLENBQUNHLFVBQVU7QUFFckMsSUFBSSxDQUFDTCxLQUFLO0lBQ1IsTUFBTSxJQUFJTSxNQUFNO0FBQ2xCO0FBRUEsSUFBSSxDQUFDRixRQUFRO0lBQ1gsTUFBTSxJQUFJRSxNQUFNO0FBQ2xCO0FBRUEsSUFBSUMsZUFBZTtBQUNuQixJQUFJQyxXQUFXO0FBRWY7OztDQUdDLEdBQ00sZUFBZUM7SUFDcEIsSUFBSUYsZ0JBQWdCQyxVQUFVO1FBQzVCLE9BQU87WUFBRUUsUUFBUUg7WUFBY0ksSUFBSUg7UUFBUztJQUM5QztJQUVBLElBQUk7UUFDRixNQUFNRSxTQUFTLElBQUlYLGdEQUFXQSxDQUFDQyxLQUFLO1FBR3BDO1FBRUEsTUFBTVUsT0FBT0UsT0FBTztRQUNwQixNQUFNRCxLQUFLRCxPQUFPQyxFQUFFLENBQUNQO1FBRXJCUyxRQUFRQyxHQUFHLENBQUM7UUFFWlAsZUFBZUc7UUFDZkYsV0FBV0c7UUFFWCxPQUFPO1lBQUVEO1lBQVFDO1FBQUc7SUFDdEIsRUFBRSxPQUFPSSxPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDLE1BQU0sSUFBSVQsTUFBTTtJQUNsQjtBQUNGO0FBRUEseUVBQXlFO0FBQ2xFLGVBQWVVO0lBQ3BCLElBQUlULGNBQWM7UUFDaEIsTUFBTUEsYUFBYVUsS0FBSztRQUN4QlYsZUFBZTtRQUNmQyxXQUFXO1FBQ1hLLFFBQVFDLEdBQUcsQ0FBQztJQUNkO0FBQ0Y7QUFFQSwrQ0FBK0M7QUFDeEMsZUFBZUksY0FBY0MsY0FBYztJQUNoRCxNQUFNLEVBQUVSLEVBQUUsRUFBRSxHQUFHLE1BQU1GO0lBQ3JCLE9BQU9FLEdBQUdTLFVBQVUsQ0FBQ0Q7QUFDdkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmF1ZGlcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9tcHRQcm9cXFByb21wdFByb1xcbGliXFxtb25nb2RiLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYic7XHJcblxyXG5jb25zdCB1cmkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSTtcclxuY29uc3QgZGJOYW1lID0gcHJvY2Vzcy5lbnYuTU9OR09EQl9EQjtcclxuXHJcbmlmICghdXJpKSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgZGVmaW5lIHRoZSBNT05HT0RCX1VSSSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpbnNpZGUgLmVudi5sb2NhbCcpO1xyXG59XHJcblxyXG5pZiAoIWRiTmFtZSkge1xyXG4gIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGRlZmluZSB0aGUgTU9OR09EQl9EQiBlbnZpcm9ubWVudCB2YXJpYWJsZSBpbnNpZGUgLmVudi5sb2NhbCcpO1xyXG59XHJcblxyXG5sZXQgY2FjaGVkQ2xpZW50ID0gbnVsbDtcclxubGV0IGNhY2hlZERiID0gbnVsbDtcclxuXHJcbi8qKlxyXG4gKiBDb25uZWN0cyB0byB0aGUgTW9uZ29EQiBkYXRhYmFzZSBhbmQgcmV0dXJucyB0aGUgY2xpZW50IGFuZCBkYiBpbnN0YW5jZXMuXHJcbiAqIENhY2hlcyB0aGUgY29ubmVjdGlvbiB0byBhdm9pZCByZWNvbm5lY3Rpbmcgb24gZXZlcnkgcmVxdWVzdCBpbiBkZXZlbG9wbWVudC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25uZWN0VG9EYXRhYmFzZSgpIHtcclxuICBpZiAoY2FjaGVkQ2xpZW50ICYmIGNhY2hlZERiKSB7XHJcbiAgICByZXR1cm4geyBjbGllbnQ6IGNhY2hlZENsaWVudCwgZGI6IGNhY2hlZERiIH07XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHVyaSwge1xyXG4gICAgICAvLyB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIC8vIERlcHJlY2F0ZWQgaW4gbmV3ZXIgdmVyc2lvbnNcclxuICAgICAgLy8gdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLCAvLyBEZXByZWNhdGVkIGluIG5ld2VyIHZlcnNpb25zXHJcbiAgICB9KTtcclxuXHJcbiAgICBhd2FpdCBjbGllbnQuY29ubmVjdCgpO1xyXG4gICAgY29uc3QgZGIgPSBjbGllbnQuZGIoZGJOYW1lKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8gTW9uZ29EQi5cIik7XHJcblxyXG4gICAgY2FjaGVkQ2xpZW50ID0gY2xpZW50O1xyXG4gICAgY2FjaGVkRGIgPSBkYjtcclxuXHJcbiAgICByZXR1cm4geyBjbGllbnQsIGRiIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY29ubmVjdCB0byBNb25nb0RCXCIsIGVycm9yKTtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBjb25uZWN0IHRvIGRhdGFiYXNlLlwiKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIE9wdGlvbmFsOiBIZWxwZXIgdG8gY2xvc2UgdGhlIGNvbm5lY3Rpb24gKHVzZWZ1bCBmb3Igc2NyaXB0cyBvciB0ZXN0cylcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlRGF0YWJhc2VDb25uZWN0aW9uKCkge1xyXG4gIGlmIChjYWNoZWRDbGllbnQpIHtcclxuICAgIGF3YWl0IGNhY2hlZENsaWVudC5jbG9zZSgpO1xyXG4gICAgY2FjaGVkQ2xpZW50ID0gbnVsbDtcclxuICAgIGNhY2hlZERiID0gbnVsbDtcclxuICAgIGNvbnNvbGUubG9nKFwiTW9uZ29EQiBjb25uZWN0aW9uIGNsb3NlZC5cIik7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGNvbGxlY3Rpb24gcmVmZXJlbmNlc1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSkge1xyXG4gIGNvbnN0IHsgZGIgfSA9IGF3YWl0IGNvbm5lY3RUb0RhdGFiYXNlKCk7XHJcbiAgcmV0dXJuIGRiLmNvbGxlY3Rpb24oY29sbGVjdGlvbk5hbWUpO1xyXG59ICJdLCJuYW1lcyI6WyJNb25nb0NsaWVudCIsInVyaSIsInByb2Nlc3MiLCJlbnYiLCJNT05HT0RCX1VSSSIsImRiTmFtZSIsIk1PTkdPREJfREIiLCJFcnJvciIsImNhY2hlZENsaWVudCIsImNhY2hlZERiIiwiY29ubmVjdFRvRGF0YWJhc2UiLCJjbGllbnQiLCJkYiIsImNvbm5lY3QiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJjbG9zZURhdGFiYXNlQ29ubmVjdGlvbiIsImNsb3NlIiwiZ2V0Q29sbGVjdGlvbiIsImNvbGxlY3Rpb25OYW1lIiwiY29sbGVjdGlvbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/mongodb.js\n");

/***/ }),

/***/ "(api-node)/./lib/mongoose.js":
/*!*************************!*\
  !*** ./lib/mongoose.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n\n// Cache the connection promise to avoid reconnecting on every call\nlet connectionPromise = null;\nconst connectDB = async ()=>{\n    // If a connection promise exists, return it to reuse the connection\n    if (connectionPromise) {\n        // console.log(\"Using cached Mongoose connection\");\n        return connectionPromise;\n    }\n    // Check for MongoDB URI environment variable\n    if (!process.env.MONGODB_URI) {\n        throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n    }\n    // Create a new connection promise\n    console.log(\"Creating new Mongoose connection...\");\n    connectionPromise = mongoose__WEBPACK_IMPORTED_MODULE_0___default().connect(process.env.MONGODB_URI, {\n        dbName: process.env.MONGODB_DB || 'PromptPro',\n        // Recommended options (check Mongoose docs for latest)\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n    }).then((mongooseInstance)=>{\n        console.log(\"Mongoose connected successfully.\");\n        return mongooseInstance; // The resolved value of the promise\n    }).catch((err)=>{\n        console.error(\"Mongoose connection error:\", err);\n        connectionPromise = null; // Reset promise on error so retry is possible\n        throw err; // Re-throw error to be caught by the calling function\n    });\n    return connectionPromise;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (connectDB);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9tb25nb29zZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0M7QUFFaEMsbUVBQW1FO0FBQ25FLElBQUlDLG9CQUFvQjtBQUV4QixNQUFNQyxZQUFZO0lBQ2hCLG9FQUFvRTtJQUNwRSxJQUFJRCxtQkFBbUI7UUFDckIsbURBQW1EO1FBQ25ELE9BQU9BO0lBQ1Q7SUFFQSw2Q0FBNkM7SUFDN0MsSUFBSSxDQUFDRSxRQUFRQyxHQUFHLENBQUNDLFdBQVcsRUFBRTtRQUM1QixNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQSxrQ0FBa0M7SUFDbENDLFFBQVFDLEdBQUcsQ0FBQztJQUNaUCxvQkFBb0JELHVEQUFnQixDQUFDRyxRQUFRQyxHQUFHLENBQUNDLFdBQVcsRUFBRTtRQUM1REssUUFBUVAsUUFBUUMsR0FBRyxDQUFDTyxVQUFVLElBQUk7UUFDbEMsdURBQXVEO1FBQ3ZEQyxpQkFBaUI7UUFDakJDLG9CQUFvQjtJQUN0QixHQUFHQyxJQUFJLENBQUMsQ0FBQ0M7UUFDUFIsUUFBUUMsR0FBRyxDQUFDO1FBQ1osT0FBT08sa0JBQWtCLG9DQUFvQztJQUMvRCxHQUFHQyxLQUFLLENBQUNDLENBQUFBO1FBQ1BWLFFBQVFXLEtBQUssQ0FBQyw4QkFBOEJEO1FBQzVDaEIsb0JBQW9CLE1BQU0sOENBQThDO1FBQ3hFLE1BQU1nQixLQUFLLHNEQUFzRDtJQUNuRTtJQUVBLE9BQU9oQjtBQUNUO0FBRUEsaUVBQWVDLFNBQVNBLEVBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmF1ZGlcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9tcHRQcm9cXFByb21wdFByb1xcbGliXFxtb25nb29zZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5cclxuLy8gQ2FjaGUgdGhlIGNvbm5lY3Rpb24gcHJvbWlzZSB0byBhdm9pZCByZWNvbm5lY3Rpbmcgb24gZXZlcnkgY2FsbFxyXG5sZXQgY29ubmVjdGlvblByb21pc2UgPSBudWxsO1xyXG5cclxuY29uc3QgY29ubmVjdERCID0gYXN5bmMgKCkgPT4ge1xyXG4gIC8vIElmIGEgY29ubmVjdGlvbiBwcm9taXNlIGV4aXN0cywgcmV0dXJuIGl0IHRvIHJldXNlIHRoZSBjb25uZWN0aW9uXHJcbiAgaWYgKGNvbm5lY3Rpb25Qcm9taXNlKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIlVzaW5nIGNhY2hlZCBNb25nb29zZSBjb25uZWN0aW9uXCIpO1xyXG4gICAgcmV0dXJuIGNvbm5lY3Rpb25Qcm9taXNlO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgZm9yIE1vbmdvREIgVVJJIGVudmlyb25tZW50IHZhcmlhYmxlXHJcbiAgaWYgKCFwcm9jZXNzLmVudi5NT05HT0RCX1VSSSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgZGVmaW5lIHRoZSBNT05HT0RCX1VSSSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpbnNpZGUgLmVudi5sb2NhbCcpO1xyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIGEgbmV3IGNvbm5lY3Rpb24gcHJvbWlzZVxyXG4gIGNvbnNvbGUubG9nKFwiQ3JlYXRpbmcgbmV3IE1vbmdvb3NlIGNvbm5lY3Rpb24uLi5cIik7XHJcbiAgY29ubmVjdGlvblByb21pc2UgPSBtb25nb29zZS5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJLCB7XHJcbiAgICBkYk5hbWU6IHByb2Nlc3MuZW52Lk1PTkdPREJfREIgfHwgJ1Byb21wdFBybycsIC8vIFVzZSBzcGVjaWZpYyBEQiBuYW1lIG9yIGRlZmF1bHRcclxuICAgIC8vIFJlY29tbWVuZGVkIG9wdGlvbnMgKGNoZWNrIE1vbmdvb3NlIGRvY3MgZm9yIGxhdGVzdClcclxuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcclxuICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcclxuICB9KS50aGVuKChtb25nb29zZUluc3RhbmNlKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk1vbmdvb3NlIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHkuXCIpO1xyXG4gICAgcmV0dXJuIG1vbmdvb3NlSW5zdGFuY2U7IC8vIFRoZSByZXNvbHZlZCB2YWx1ZSBvZiB0aGUgcHJvbWlzZVxyXG4gIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiTW9uZ29vc2UgY29ubmVjdGlvbiBlcnJvcjpcIiwgZXJyKTtcclxuICAgIGNvbm5lY3Rpb25Qcm9taXNlID0gbnVsbDsgLy8gUmVzZXQgcHJvbWlzZSBvbiBlcnJvciBzbyByZXRyeSBpcyBwb3NzaWJsZVxyXG4gICAgdGhyb3cgZXJyOyAvLyBSZS10aHJvdyBlcnJvciB0byBiZSBjYXVnaHQgYnkgdGhlIGNhbGxpbmcgZnVuY3Rpb25cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGNvbm5lY3Rpb25Qcm9taXNlO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdERCOyAiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJjb25uZWN0aW9uUHJvbWlzZSIsImNvbm5lY3REQiIsInByb2Nlc3MiLCJlbnYiLCJNT05HT0RCX1VSSSIsIkVycm9yIiwiY29uc29sZSIsImxvZyIsImNvbm5lY3QiLCJkYk5hbWUiLCJNT05HT0RCX0RCIiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5IiwidGhlbiIsIm1vbmdvb3NlSW5zdGFuY2UiLCJjYXRjaCIsImVyciIsImVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./lib/mongoose.js\n");

/***/ }),

/***/ "(api-node)/./lib/repositories/promptRepository.js":
/*!**********************************************!*\
  !*** ./lib/repositories/promptRepository.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPrompt: () => (/* binding */ createPrompt),\n/* harmony export */   deletePrompt: () => (/* binding */ deletePrompt),\n/* harmony export */   getAllPrompts: () => (/* binding */ getAllPrompts),\n/* harmony export */   getPromptById: () => (/* binding */ getPromptById),\n/* harmony export */   incrementUsageCount: () => (/* binding */ incrementUsageCount),\n/* harmony export */   searchPrompts: () => (/* binding */ searchPrompts),\n/* harmony export */   updatePrompt: () => (/* binding */ updatePrompt)\n/* harmony export */ });\n/* harmony import */ var _mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mongodb */ \"(api-node)/./lib/mongodb.js\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst COLLECTION_NAME = 'prompts';\n/**\r\n * Get all prompts with optional filtering\r\n * @param {Object} filter - Optional filter criteria\r\n * @returns {Promise<Array>} Array of prompts\r\n */ async function getAllPrompts(filter = {}) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getCollection)(COLLECTION_NAME);\n    const prompts = await collection.find(filter).toArray();\n    return prompts.map(mapMongoPrompt);\n}\n/**\r\n * Get a single prompt by ID\r\n * @param {string} id - Prompt ID\r\n * @returns {Promise<Object|null>} Prompt object or null\r\n */ async function getPromptById(id) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getCollection)(COLLECTION_NAME);\n    const prompt = await collection.findOne({\n        _id: new mongodb__WEBPACK_IMPORTED_MODULE_1__.ObjectId(id)\n    });\n    return prompt ? mapMongoPrompt(prompt) : null;\n}\n/**\r\n * Create a new prompt\r\n * @param {Object} promptData - Prompt data\r\n * @returns {Promise<Object>} Created prompt\r\n */ async function createPrompt(promptData) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getCollection)(COLLECTION_NAME);\n    const newPrompt = {\n        ...promptData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        usageCount: 0,\n        rating: promptData.rating || 0\n    };\n    const result = await collection.insertOne(newPrompt);\n    return {\n        id: result.insertedId.toString(),\n        ...newPrompt\n    };\n}\n/**\r\n * Update an existing prompt\r\n * @param {string} id - Prompt ID\r\n * @param {Object} promptData - Updated prompt data\r\n * @returns {Promise<Object|null>} Updated prompt or null\r\n */ async function updatePrompt(id, promptData) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getCollection)(COLLECTION_NAME);\n    const updatedPrompt = {\n        ...promptData,\n        updatedAt: new Date()\n    };\n    // Don't override these fields if not explicitly provided\n    delete updatedPrompt._id;\n    delete updatedPrompt.id;\n    delete updatedPrompt.createdAt;\n    const result = await collection.findOneAndUpdate({\n        _id: new mongodb__WEBPACK_IMPORTED_MODULE_1__.ObjectId(id)\n    }, {\n        $set: updatedPrompt\n    }, {\n        returnDocument: 'after'\n    });\n    return result.value ? mapMongoPrompt(result.value) : null;\n}\n/**\r\n * Delete a prompt\r\n * @param {string} id - Prompt ID\r\n * @returns {Promise<boolean>} Success flag\r\n */ async function deletePrompt(id) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getCollection)(COLLECTION_NAME);\n    const result = await collection.deleteOne({\n        _id: new mongodb__WEBPACK_IMPORTED_MODULE_1__.ObjectId(id)\n    });\n    return result.deletedCount === 1;\n}\n/**\r\n * Increment prompt usage count\r\n * @param {string} id - Prompt ID\r\n * @returns {Promise<Object|null>} Updated prompt or null\r\n */ async function incrementUsageCount(id) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getCollection)(COLLECTION_NAME);\n    const result = await collection.findOneAndUpdate({\n        _id: new mongodb__WEBPACK_IMPORTED_MODULE_1__.ObjectId(id)\n    }, {\n        $inc: {\n            usageCount: 1\n        }\n    }, {\n        returnDocument: 'after'\n    });\n    return result.value ? mapMongoPrompt(result.value) : null;\n}\n/**\r\n * Search prompts with advanced filtering\r\n * @param {string} query - Search text\r\n * @param {Object} options - Search options\r\n * @returns {Promise<Array>} Array of matching prompts\r\n */ async function searchPrompts(query, options = {}) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getCollection)(COLLECTION_NAME);\n    // Build MongoDB query\n    const filter = {};\n    // Text search if query provided\n    if (query && query.trim() !== '') {\n        filter.$or = [\n            {\n                title: {\n                    $regex: query,\n                    $options: 'i'\n                }\n            },\n            {\n                content: {\n                    $regex: query,\n                    $options: 'i'\n                }\n            },\n            {\n                description: {\n                    $regex: query,\n                    $options: 'i'\n                }\n            },\n            {\n                tags: {\n                    $in: [\n                        query\n                    ]\n                }\n            }\n        ];\n    }\n    // Apply filters\n    if (options.userId) {\n        filter.userId = options.userId;\n    }\n    if (options.teamId) {\n        filter.$or = filter.$or || [];\n        filter.$or.push({\n            teamId: options.teamId\n        }, {\n            visibility: 'team',\n            teamId: options.teamId\n        });\n    }\n    if (options.visibility) {\n        filter.visibility = options.visibility;\n    }\n    if (options.aiPlatform) {\n        filter.aiPlatform = options.aiPlatform;\n    }\n    if (options.minRating) {\n        filter.rating = {\n            $gte: parseFloat(options.minRating)\n        };\n    }\n    if (options.minUsageCount) {\n        filter.usageCount = {\n            $gte: parseInt(options.minUsageCount, 10)\n        };\n    }\n    if (options.tags && options.tags.length > 0) {\n        const tags = Array.isArray(options.tags) ? options.tags : [\n            options.tags\n        ];\n        if (options.tagMatchType === 'any') {\n            filter.tags = {\n                $in: tags\n            };\n        } else {\n            filter.tags = {\n                $all: tags\n            };\n        }\n    }\n    // Sort options\n    const sort = {};\n    if (options.sortBy) {\n        sort[options.sortBy] = options.sortDirection === 'desc' ? -1 : 1;\n    } else {\n        sort.createdAt = -1; // Default sort by newest\n    }\n    const prompts = await collection.find(filter).sort(sort).limit(options.limit || 100).toArray();\n    return prompts.map(mapMongoPrompt);\n}\n/**\r\n * Map MongoDB document to app model (handling _id conversion)\r\n * @param {Object} doc - MongoDB document\r\n * @returns {Object} Mapped prompt object\r\n */ function mapMongoPrompt(doc) {\n    return {\n        id: doc._id.toString(),\n        ...doc,\n        _id: undefined\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/repositories/promptRepository.js\n");

/***/ }),

/***/ "(api-node)/./models/auditLog.js":
/*!****************************!*\
  !*** ./models/auditLog.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   logAuditEvent: () => (/* binding */ logAuditEvent)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n\nconst AuditLogSchema = new mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema({\n    timestamp: {\n        type: Date,\n        default: Date.now,\n        index: true,\n        required: true\n    },\n    userId: {\n        type: mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema.Types.ObjectId,\n        ref: 'User',\n        index: true\n    },\n    action: {\n        type: String,\n        required: [\n            true,\n            'Action identifier is required.'\n        ],\n        trim: true,\n        index: true\n    },\n    targetType: {\n        type: String,\n        trim: true,\n        index: true\n    },\n    targetId: {\n        type: String,\n        trim: true,\n        index: true\n    },\n    details: {\n        type: mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema.Types.Mixed,\n        default: {}\n    }\n}, {\n    timestamps: {\n        createdAt: 'timestamp',\n        updatedAt: false\n    } // Use timestamp as createdAt, disable updatedAt\n});\n// Compound indexes for common audit queries\nAuditLogSchema.index({\n    userId: 1,\n    timestamp: -1\n});\nAuditLogSchema.index({\n    action: 1,\n    timestamp: -1\n});\nAuditLogSchema.index({\n    targetType: 1,\n    targetId: 1,\n    timestamp: -1\n});\n// Consider adding TTL index if logs should expire automatically\n// AuditLogSchema.index({ timestamp: 1 }, { expireAfterSeconds: 365 * 24 * 60 * 60 }); // 1 year\nconst AuditLog = mongoose__WEBPACK_IMPORTED_MODULE_0__.models.AuditLog || mongoose__WEBPACK_IMPORTED_MODULE_0___default().model('AuditLog', AuditLogSchema);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuditLog);\n// Helper function to simplify logging (can be placed in a lib file)\nasync function logAuditEvent(data) {\n    try {\n        // Ensure required fields are present\n        if (!data.action) {\n            throw new Error('Audit log requires an action.');\n        }\n        // Add timestamp if not provided (should be handled by default, but safety check)\n        if (!data.timestamp) {\n            data.timestamp = new Date();\n        }\n        const logEntry = new AuditLog(data);\n        await logEntry.save();\n        console.log(`[Audit Log] Action: ${data.action}, User: ${data.userId || 'System'}, Target: ${data.targetType || 'N/A'}:${data.targetId || 'N/A'}`);\n    } catch (error) {\n        console.error('Failed to save audit log:', error, 'Data:', data);\n    // Decide how to handle logging failures (e.g., log to console, metrics)\n    // Avoid throwing error here to prevent disruption of the main API flow\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL21vZGVscy9hdWRpdExvZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBRXBELE1BQU1HLGlCQUFpQixJQUFJRiw0Q0FBTUEsQ0FBQztJQUM5QkcsV0FBVztRQUNQQyxNQUFNQztRQUNOQyxTQUFTRCxLQUFLRSxHQUFHO1FBQ2pCQyxPQUFPO1FBQ1BDLFVBQVU7SUFDZDtJQUNBQyxRQUFRO1FBQ0pOLE1BQU1KLDRDQUFNQSxDQUFDVyxLQUFLLENBQUNDLFFBQVE7UUFDM0JDLEtBQUs7UUFDTEwsT0FBTztJQUVYO0lBQ0FNLFFBQVE7UUFDSlYsTUFBTVc7UUFDTk4sVUFBVTtZQUFDO1lBQU07U0FBaUM7UUFDbERPLE1BQU07UUFDTlIsT0FBTztJQUlYO0lBQ0FTLFlBQVk7UUFDUmIsTUFBTVc7UUFDTkMsTUFBTTtRQUNOUixPQUFPO0lBRVg7SUFDQVUsVUFBVTtRQUNOZCxNQUFNVztRQUNOQyxNQUFNO1FBQ05SLE9BQU87SUFDWDtJQUNBVyxTQUFTO1FBQ0xmLE1BQU1KLDRDQUFNQSxDQUFDVyxLQUFLLENBQUNTLEtBQUs7UUFDeEJkLFNBQVMsQ0FBQztJQUtkO0FBQ0osR0FBRztJQUNDZSxZQUFZO1FBQUVDLFdBQVc7UUFBYUMsV0FBVztJQUFNLEVBQUUsZ0RBQWdEO0FBQzdHO0FBRUEsNENBQTRDO0FBQzVDckIsZUFBZU0sS0FBSyxDQUFDO0lBQUVFLFFBQVE7SUFBR1AsV0FBVyxDQUFDO0FBQUU7QUFDaERELGVBQWVNLEtBQUssQ0FBQztJQUFFTSxRQUFRO0lBQUdYLFdBQVcsQ0FBQztBQUFFO0FBQ2hERCxlQUFlTSxLQUFLLENBQUM7SUFBRVMsWUFBWTtJQUFHQyxVQUFVO0lBQUdmLFdBQVcsQ0FBQztBQUFFO0FBRWpFLGdFQUFnRTtBQUNoRSxnR0FBZ0c7QUFFaEcsTUFBTXFCLFdBQVd2Qiw0Q0FBTUEsQ0FBQ3VCLFFBQVEsSUFBSXpCLHFEQUFjLENBQUMsWUFBWUc7QUFFL0QsaUVBQWVzQixRQUFRQSxFQUFDO0FBRXhCLG9FQUFvRTtBQUM3RCxlQUFlRSxjQUFjQyxJQUFJO0lBQ3BDLElBQUk7UUFDQSxxQ0FBcUM7UUFDckMsSUFBSSxDQUFDQSxLQUFLYixNQUFNLEVBQUU7WUFDZCxNQUFNLElBQUljLE1BQU07UUFDcEI7UUFDQSxpRkFBaUY7UUFDakYsSUFBSSxDQUFDRCxLQUFLeEIsU0FBUyxFQUFFO1lBQ2pCd0IsS0FBS3hCLFNBQVMsR0FBRyxJQUFJRTtRQUN6QjtRQUVBLE1BQU13QixXQUFXLElBQUlMLFNBQVNHO1FBQzlCLE1BQU1FLFNBQVNDLElBQUk7UUFDbkJDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixFQUFFTCxLQUFLYixNQUFNLENBQUMsUUFBUSxFQUFFYSxLQUFLakIsTUFBTSxJQUFJLFNBQVMsVUFBVSxFQUFFaUIsS0FBS1YsVUFBVSxJQUFJLE1BQU0sQ0FBQyxFQUFFVSxLQUFLVCxRQUFRLElBQUksT0FBTztJQUNySixFQUFFLE9BQU9lLE9BQU87UUFDWkYsUUFBUUUsS0FBSyxDQUFDLDZCQUE2QkEsT0FBTyxTQUFTTjtJQUMzRCx3RUFBd0U7SUFDeEUsdUVBQXVFO0lBQzNFO0FBQ0oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmF1ZGlcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9tcHRQcm9cXFByb21wdFByb1xcbW9kZWxzXFxhdWRpdExvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UsIHsgU2NoZW1hLCBtb2RlbHMgfSBmcm9tICdtb25nb29zZSc7XHJcblxyXG5jb25zdCBBdWRpdExvZ1NjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gICAgdGltZXN0YW1wOiB7XHJcbiAgICAgICAgdHlwZTogRGF0ZSxcclxuICAgICAgICBkZWZhdWx0OiBEYXRlLm5vdyxcclxuICAgICAgICBpbmRleDogdHJ1ZSxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICB1c2VySWQ6IHsgLy8gVGhlIHVzZXIgd2hvIHBlcmZvcm1lZCB0aGUgYWN0aW9uIChpZiBhcHBsaWNhYmxlKVxyXG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuICAgICAgICByZWY6ICdVc2VyJyxcclxuICAgICAgICBpbmRleDogdHJ1ZSxcclxuICAgICAgICAvLyByZXF1aXJlZDogdHJ1ZSwgLy8gTm90IHN0cmljdGx5IHJlcXVpcmVkIGlmIGFjdGlvbiBpcyBzeXN0ZW0tcmVsYXRlZD9cclxuICAgIH0sXHJcbiAgICBhY3Rpb246IHsgLy8gQSBzcGVjaWZpYyBpZGVudGlmaWVyIGZvciB0aGUgYWN0aW9uIHBlcmZvcm1lZFxyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdBY3Rpb24gaWRlbnRpZmllciBpcyByZXF1aXJlZC4nXSxcclxuICAgICAgICB0cmltOiB0cnVlLFxyXG4gICAgICAgIGluZGV4OiB0cnVlLFxyXG4gICAgICAgIC8vIEV4YW1wbGVzOiAnbG9naW4nLCAnbG9nb3V0JywgJ2NyZWF0ZV9wcm9tcHQnLCAnZGVsZXRlX3Byb21wdCcsIFxyXG4gICAgICAgIC8vICAgICAgICAgICAndXBkYXRlX3RlYW1fcm9sZScsICdhZGRfdGVhbV9tZW1iZXInLCAncmVtb3ZlX3RlYW1fbWVtYmVyJyxcclxuICAgICAgICAvLyAgICAgICAgICAgJ3VwZ3JhZGVfcGxhbicsICdjYW5jZWxfc3Vic2NyaXB0aW9uJ1xyXG4gICAgfSxcclxuICAgIHRhcmdldFR5cGU6IHsgLy8gVGhlIHR5cGUgb2YgZW50aXR5IGFmZmVjdGVkIGJ5IHRoZSBhY3Rpb25cclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgdHJpbTogdHJ1ZSxcclxuICAgICAgICBpbmRleDogdHJ1ZSxcclxuICAgICAgICAvLyBFeGFtcGxlczogJ3VzZXInLCAncHJvbXB0JywgJ3RlYW0nLCAnY29tbWVudCcsICdzdWJzY3JpcHRpb24nLCAnc3lzdGVtJ1xyXG4gICAgfSxcclxuICAgIHRhcmdldElkOiB7IC8vIFRoZSBzcGVjaWZpYyBJRCBvZiB0aGUgZW50aXR5IGFmZmVjdGVkIChjYW4gYmUgT2JqZWN0SWQgb3Igb3RoZXIgc3RyaW5nIElEKVxyXG4gICAgICAgIHR5cGU6IFN0cmluZywgXHJcbiAgICAgICAgdHJpbTogdHJ1ZSxcclxuICAgICAgICBpbmRleDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICBkZXRhaWxzOiB7IC8vIEFkZGl0aW9uYWwgY29udGV4dCBhYm91dCB0aGUgZXZlbnRcclxuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuTWl4ZWQsIC8vIEFsbG93cyBzdG9yaW5nIG9iamVjdHMgd2l0aCB2YXJ5aW5nIHN0cnVjdHVyZXNcclxuICAgICAgICBkZWZhdWx0OiB7fVxyXG4gICAgICAgIC8vIEV4YW1wbGVzOiBcclxuICAgICAgICAvLyBGb3IgbG9naW46IHsgaXBBZGRyZXNzOiAnMS4yLjMuNCcsIHVzZXJBZ2VudDogJy4uLicgfVxyXG4gICAgICAgIC8vIEZvciB1cGRhdGU6IHsgZmllbGQ6ICdyb2xlJywgb2xkVmFsdWU6ICdtZW1iZXInLCBuZXdWYWx1ZTogJ2FkbWluJyB9XHJcbiAgICAgICAgLy8gRm9yIGRlbGV0ZTogeyBkZWxldGVkT2JqZWN0TmFtZTogJ015IE9sZCBQcm9tcHQnIH1cclxuICAgIH1cclxufSwge1xyXG4gICAgdGltZXN0YW1wczogeyBjcmVhdGVkQXQ6ICd0aW1lc3RhbXAnLCB1cGRhdGVkQXQ6IGZhbHNlIH0gLy8gVXNlIHRpbWVzdGFtcCBhcyBjcmVhdGVkQXQsIGRpc2FibGUgdXBkYXRlZEF0XHJcbn0pO1xyXG5cclxuLy8gQ29tcG91bmQgaW5kZXhlcyBmb3IgY29tbW9uIGF1ZGl0IHF1ZXJpZXNcclxuQXVkaXRMb2dTY2hlbWEuaW5kZXgoeyB1c2VySWQ6IDEsIHRpbWVzdGFtcDogLTEgfSk7XHJcbkF1ZGl0TG9nU2NoZW1hLmluZGV4KHsgYWN0aW9uOiAxLCB0aW1lc3RhbXA6IC0xIH0pO1xyXG5BdWRpdExvZ1NjaGVtYS5pbmRleCh7IHRhcmdldFR5cGU6IDEsIHRhcmdldElkOiAxLCB0aW1lc3RhbXA6IC0xIH0pO1xyXG5cclxuLy8gQ29uc2lkZXIgYWRkaW5nIFRUTCBpbmRleCBpZiBsb2dzIHNob3VsZCBleHBpcmUgYXV0b21hdGljYWxseVxyXG4vLyBBdWRpdExvZ1NjaGVtYS5pbmRleCh7IHRpbWVzdGFtcDogMSB9LCB7IGV4cGlyZUFmdGVyU2Vjb25kczogMzY1ICogMjQgKiA2MCAqIDYwIH0pOyAvLyAxIHllYXJcclxuXHJcbmNvbnN0IEF1ZGl0TG9nID0gbW9kZWxzLkF1ZGl0TG9nIHx8IG1vbmdvb3NlLm1vZGVsKCdBdWRpdExvZycsIEF1ZGl0TG9nU2NoZW1hKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEF1ZGl0TG9nO1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNpbXBsaWZ5IGxvZ2dpbmcgKGNhbiBiZSBwbGFjZWQgaW4gYSBsaWIgZmlsZSlcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvZ0F1ZGl0RXZlbnQoZGF0YSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBFbnN1cmUgcmVxdWlyZWQgZmllbGRzIGFyZSBwcmVzZW50XHJcbiAgICAgICAgaWYgKCFkYXRhLmFjdGlvbikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F1ZGl0IGxvZyByZXF1aXJlcyBhbiBhY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFkZCB0aW1lc3RhbXAgaWYgbm90IHByb3ZpZGVkIChzaG91bGQgYmUgaGFuZGxlZCBieSBkZWZhdWx0LCBidXQgc2FmZXR5IGNoZWNrKVxyXG4gICAgICAgIGlmICghZGF0YS50aW1lc3RhbXApIHtcclxuICAgICAgICAgICAgZGF0YS50aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBsb2dFbnRyeSA9IG5ldyBBdWRpdExvZyhkYXRhKTtcclxuICAgICAgICBhd2FpdCBsb2dFbnRyeS5zYXZlKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFtBdWRpdCBMb2ddIEFjdGlvbjogJHtkYXRhLmFjdGlvbn0sIFVzZXI6ICR7ZGF0YS51c2VySWQgfHwgJ1N5c3RlbSd9LCBUYXJnZXQ6ICR7ZGF0YS50YXJnZXRUeXBlIHx8ICdOL0EnfToke2RhdGEudGFyZ2V0SWQgfHwgJ04vQSd9YCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGF1ZGl0IGxvZzonLCBlcnJvciwgJ0RhdGE6JywgZGF0YSk7XHJcbiAgICAgICAgLy8gRGVjaWRlIGhvdyB0byBoYW5kbGUgbG9nZ2luZyBmYWlsdXJlcyAoZS5nLiwgbG9nIHRvIGNvbnNvbGUsIG1ldHJpY3MpXHJcbiAgICAgICAgLy8gQXZvaWQgdGhyb3dpbmcgZXJyb3IgaGVyZSB0byBwcmV2ZW50IGRpc3J1cHRpb24gb2YgdGhlIG1haW4gQVBJIGZsb3dcclxuICAgIH1cclxufSAiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJTY2hlbWEiLCJtb2RlbHMiLCJBdWRpdExvZ1NjaGVtYSIsInRpbWVzdGFtcCIsInR5cGUiLCJEYXRlIiwiZGVmYXVsdCIsIm5vdyIsImluZGV4IiwicmVxdWlyZWQiLCJ1c2VySWQiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiYWN0aW9uIiwiU3RyaW5nIiwidHJpbSIsInRhcmdldFR5cGUiLCJ0YXJnZXRJZCIsImRldGFpbHMiLCJNaXhlZCIsInRpbWVzdGFtcHMiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJBdWRpdExvZyIsIm1vZGVsIiwibG9nQXVkaXRFdmVudCIsImRhdGEiLCJFcnJvciIsImxvZ0VudHJ5Iiwic2F2ZSIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./models/auditLog.js\n");

/***/ }),

/***/ "(api-node)/./models/prompt.js":
/*!**************************!*\
  !*** ./models/prompt.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SUPPORTED_AI_PLATFORMS: () => (/* binding */ SUPPORTED_AI_PLATFORMS),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   validatePrompt: () => (/* binding */ validatePrompt)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n\n// Prompt model structure\n// Define supported AI platforms\nconst SUPPORTED_AI_PLATFORMS = [\n    'ChatGPT',\n    'Claude',\n    'Gemini',\n    'MidJourney',\n    'DALL-E',\n    'Other' // Allow a generic 'Other' category\n];\nconst RatingSchema = new mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema({\n    user: {\n        type: mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema.Types.ObjectId,\n        ref: 'User',\n        required: true\n    },\n    value: {\n        type: Number,\n        required: true,\n        min: 1,\n        max: 5\n    }\n}, {\n    _id: false\n}); // Don't create separate _id for subdocuments\nconst PromptSchema = new mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema({\n    title: {\n        type: String,\n        required: [\n            true,\n            'Title is required.'\n        ],\n        trim: true,\n        minlength: [\n            3,\n            'Title must be at least 3 characters.'\n        ],\n        maxlength: [\n            150,\n            'Title cannot exceed 150 characters.'\n        ] // Increased length slightly\n    },\n    text: {\n        type: String,\n        required: [\n            true,\n            'Prompt text is required.'\n        ],\n        trim: true,\n        minlength: [\n            10,\n            'Prompt text must be at least 10 characters.'\n        ]\n    },\n    description: {\n        type: String,\n        trim: true,\n        maxlength: [\n            500,\n            'Description cannot exceed 500 characters.'\n        ]\n    },\n    creator: {\n        type: mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema.Types.ObjectId,\n        ref: 'User',\n        required: [\n            true,\n            'Creator is required.'\n        ]\n    },\n    tags: [\n        {\n            type: String,\n            trim: true,\n            lowercase: true,\n            validate: [\n                arrayLimit,\n                '{PATH} exceeds the limit of 10 tags'\n            ]\n        }\n    ],\n    platformCompatibility: [\n        {\n            type: String,\n            enum: SUPPORTED_AI_PLATFORMS // Validate against the list\n        }\n    ],\n    // Basic performance tracking fields\n    usageCount: {\n        type: Number,\n        default: 0,\n        min: 0\n    },\n    ratings: [\n        RatingSchema\n    ],\n    successCount: {\n        type: Number,\n        default: 0,\n        min: 0\n    },\n    failureCount: {\n        type: Number,\n        default: 0,\n        min: 0\n    },\n    visibility: {\n        type: String,\n        enum: [\n            'private',\n            'team',\n            'public'\n        ],\n        default: 'private',\n        required: true,\n        index: true\n    },\n    teamId: {\n        type: mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema.Types.ObjectId,\n        ref: 'Team',\n        index: true,\n        sparse: true\n    },\n    isEffective: {\n        type: Boolean,\n        default: null,\n        index: true\n    },\n    variables: {\n        type: [\n            String\n        ],\n        default: []\n    },\n    version: {\n        type: Number,\n        default: 1\n    }\n}, {\n    timestamps: true // Automatically add createdAt and updatedAt\n});\n// --- Indexing --- \n// Index fields that are often queried/sorted\nPromptSchema.index({\n    creator: 1,\n    createdAt: -1\n});\nPromptSchema.index({\n    tags: 1\n});\nPromptSchema.index({\n    title: 'text',\n    description: 'text'\n}); // For text search later\nPromptSchema.index({\n    teamId: 1\n}); // Add index for teamId\nPromptSchema.index({\n    title: 'text',\n    text: 'text',\n    description: 'text',\n    tags: 'text'\n});\n// --- Virtuals (Example: Average Rating - Calculation might be complex/deferred) ---\n/*\nPromptSchema.virtual('averageRating').get(function() {\n    if (this.ratings && this.ratings.length > 0) {\n        const sum = this.ratings.reduce((acc, rating) => acc + rating.value, 0);\n        return sum / this.ratings.length;\n    }\n    return 0;\n});\n\nPromptSchema.virtual('successRate').get(function() {\n    const totalFeedback = this.successCount + this.failureCount;\n    if (totalFeedback === 0) {\n        return null; // Or 0, depending on desired representation\n    }\n    return (this.successCount / totalFeedback) * 100;\n});\n\n// Ensure virtuals are included when converting to JSON/Object\nPromptSchema.set('toJSON', { virtuals: true });\nPromptSchema.set('toObject', { virtuals: true });\n*/ // --- Model Creation ---\nconst Prompt = mongoose__WEBPACK_IMPORTED_MODULE_0__.models.Prompt || mongoose__WEBPACK_IMPORTED_MODULE_0___default().model('Prompt', PromptSchema);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Prompt);\n// --- Validation Function ---\nfunction validatePrompt(data) {\n    const errors = {};\n    let isValid = true;\n    // Check for required fields\n    if (!data.title || typeof data.title !== 'string' || data.title.trim().length === 0) {\n        errors.title = 'Title is required.';\n        isValid = false;\n    }\n    // Check the actual schema field 'text'\n    if (!data.text || typeof data.text !== 'string' || data.text.trim().length === 0) {\n        errors.text = 'Prompt text is required.'; // Changed key to 'text'\n        isValid = false;\n    }\n    // Potential future checks: length constraints, tag formats, etc.\n    // Note: Mongoose schema validation will handle more detailed checks later.\n    return {\n        isValid,\n        errors\n    };\n}\n// Helper function for array limit validation\nfunction arrayLimit(val) {\n    return val.length <= 10;\n}\n// Ensure teamId is present if visibility is 'team'\nPromptSchema.path('teamId').validate(function(value) {\n    return this.visibility !== 'team' || value != null;\n}, 'Team ID is required when visibility is set to team.'); // Pre-save hook to increment version (Example - adjust if needed)\n // PromptSchema.pre('save', function(next) {\n //     if (!this.isNew && this.isModified()) {\n //         this.version += 1;\n //     }\n //     next();\n // });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./models/prompt.js\n");

/***/ }),

/***/ "(api-node)/./models/team.js":
/*!************************!*\
  !*** ./models/team.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Team data model and validation functions\n */ \n// Define default limits based on plan\nconst PLAN_LIMITS = {\n    Free: {\n        promptLimit: 50\n    },\n    Pro: {\n        promptLimit: 1000\n    }\n};\nconst MemberSchema = new mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema({\n    user: {\n        type: mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema.Types.ObjectId,\n        ref: 'User',\n        required: true\n    },\n    role: {\n        type: String,\n        required: true,\n        enum: [\n            'owner',\n            'admin',\n            'member'\n        ],\n        default: 'member'\n    },\n    joinedAt: {\n        type: Date,\n        default: Date.now\n    }\n}, {\n    _id: false\n}); // No separate _id for members sub-document\nconst TeamSchema = new mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema({\n    name: {\n        type: String,\n        required: [\n            true,\n            'Team name is required.'\n        ],\n        trim: true,\n        maxlength: [\n            100,\n            'Team name cannot exceed 100 characters.'\n        ]\n    },\n    description: {\n        type: String,\n        trim: true,\n        maxlength: [\n            500,\n            'Team description cannot exceed 500 characters.'\n        ]\n    },\n    creator: {\n        type: mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema.Types.ObjectId,\n        ref: 'User',\n        required: [\n            true,\n            'Team creator is required.'\n        ]\n    },\n    members: [\n        MemberSchema\n    ],\n    // --- Plan & Limits ---\n    plan: {\n        type: String,\n        enum: Object.keys(PLAN_LIMITS),\n        default: 'Free'\n    },\n    promptLimit: {\n        type: Number\n    },\n    // --- Stripe Integration Fields ---\n    stripeCustomerId: {\n        type: String,\n        index: true,\n        sparse: true // Allow null/undefined values in the index\n    },\n    stripeSubscriptionId: {\n        type: String,\n        index: true,\n        sparse: true\n    }\n}, {\n    timestamps: true // Automatically add createdAt and updatedAt\n});\n// --- Indexing ---\nTeamSchema.index({\n    name: 1\n});\n// Ensure efficient querying for members\nTeamSchema.index({\n    \"members.user\": 1\n});\nTeamSchema.index({\n    plan: 1\n}); // Index the plan field\n// --- Pre-save Hook ---\n// Automatically add the creator as the initial 'owner' member when a team is created\nTeamSchema.pre('save', function(next) {\n    // Set default members\n    if (this.isNew) {\n        if (!this.members) {\n            this.members = [];\n        }\n        const creatorExists = this.members.some((member)=>member.user.equals(this.creator));\n        if (!creatorExists) {\n            this.members.push({\n                user: this.creator,\n                role: 'owner'\n            });\n        }\n    }\n    // Set default promptLimit based on plan if not already set or if plan changes\n    if (this.isNew || this.isModified('plan')) {\n        const limits = PLAN_LIMITS[this.plan];\n        if (limits) {\n            this.promptLimit = limits.promptLimit;\n        }\n    }\n    next();\n});\n// --- Model Creation ---\n// Use 'Team' as the model name following Mongoose convention\nconst Team = mongoose__WEBPACK_IMPORTED_MODULE_0__.models.Team || mongoose__WEBPACK_IMPORTED_MODULE_0___default().model('Team', TeamSchema);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Team); /**\n * Team member schema\n * @typedef {Object} TeamMember\n * @property {string} userId - User ID\n * @property {string} role - Member role (owner, admin, member)\n * @property {string} joinedAt - Timestamp when member joined\n */  // Removed helper functions (validateTeam, sanitizeTeam, getMemberRole, isTeamAdmin, isTeamMember)\n // These have been moved to lib/teamUtils.js to avoid including Mongoose model code in the client bundle.\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./models/team.js\n");

/***/ }),

/***/ "(api-node)/./models/user.js":
/*!************************!*\
  !*** ./models/user.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   sanitizeUser: () => (/* binding */ sanitizeUser),\n/* harmony export */   validateUser: () => (/* binding */ validateUser)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n\n// Define the User Schema using Mongoose\nconst UserSchema = new mongoose__WEBPACK_IMPORTED_MODULE_0__.Schema({\n    username: {\n        type: String,\n        required: [\n            true,\n            'Username is required.'\n        ],\n        unique: [\n            true,\n            'Username already exists.'\n        ],\n        match: [\n            /^(?=.{4,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$/,\n            \"Username invalid, it should contain 4-20 alphanumeric letters and be unique!\"\n        ] // Example regex validation\n    },\n    name: {\n        type: String,\n        required: [\n            true,\n            'Name is required.'\n        ],\n        trim: true\n    },\n    email: {\n        type: String,\n        required: [\n            true,\n            'Email is required.'\n        ],\n        unique: true,\n        lowercase: true,\n        trim: true,\n        match: [\n            /\\S+@\\S+\\.\\S+/,\n            'Please use a valid email address.'\n        ]\n    },\n    password: {\n        type: String,\n        required: [\n            true,\n            'Password is required.'\n        ],\n        select: false // Prevents password hash from being sent by default\n    },\n    image: {\n        type: String\n    },\n    role: {\n        type: String,\n        enum: [\n            'user',\n            'admin'\n        ],\n        default: 'user'\n    },\n    bio: {\n        type: String,\n        maxlength: 160 // Example constraint\n    },\n    preferences: {\n        type: Object // Or define a more specific sub-schema if needed\n    },\n    hasCompletedOnboarding: {\n        type: Boolean,\n        default: false\n    },\n    // --- Payment/Plan Fields ---\n    plan: {\n        type: String,\n        enum: [\n            'Free',\n            'Pro'\n        ],\n        default: 'Free' // Default to the 'Free' plan\n    },\n    promptCount: {\n        type: Number,\n        default: 0,\n        min: 0 // Ensure count doesn't go below zero\n    },\n    stripeCustomerId: {\n        type: String,\n        index: true // Index if you often look up users by Stripe ID\n    }\n}, {\n    timestamps: true\n}); // Enable automatic timestamps\n// Create the User model if it doesn't already exist\nconst User = mongoose__WEBPACK_IMPORTED_MODULE_0__.models.User || mongoose__WEBPACK_IMPORTED_MODULE_0___default().model('User', UserSchema);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (User);\n// Validation for user data (consider adapting to Mongoose validation or using alongside)\nconst validateUser = (data)=>{\n    const errors = {};\n    // Username validation\n    if (!data.username) {\n        errors.username = 'Username is required';\n    } else if (data.username.length < 4 || data.username.length > 20) {\n        errors.username = 'Username must be between 4 and 20 characters';\n    }\n    if (!/^[a-zA-Z0-9._]+$/.test(data.username) || data.username.includes('..') || data.username.startsWith('.') || data.username.endsWith('.') || data.username.startsWith('_') || data.username.endsWith('_')) {\n        // Check if username exists first before applying regex if making optional\n        if (data.username) errors.username = 'Username contains invalid characters.';\n    }\n    // Name validation (removed - no longer required on signup)\n    /*\r\n  if (!data.name) {\r\n    errors.name = 'Name is required';\r\n  } else if (data.name.length < 2) {\r\n    errors.name = 'Name must be at least 2 characters';\r\n  }\r\n  */ // Email validation\n    if (!data.email) {\n        errors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(data.email)) {\n        errors.email = 'Email is invalid';\n    }\n    // Password validation (for input, not the hash)\n    // Note: Mongoose handles required check. This is for length etc. on signup.\n    if (data.password !== undefined) {\n        if (data.password.length < 8) {\n            errors.password = 'Password must be at least 8 characters';\n        }\n    }\n    return {\n        isValid: Object.keys(errors).length === 0,\n        errors\n    };\n};\n// Method to sanitize user data for client-side (remove sensitive info)\n// Adapt this if you fetch user data using Mongoose and need to hide fields\n// Mongoose 'select: false' on password helps, but this can be used for other fields\nconst sanitizeUser = (user)=>{\n    if (!user) return null;\n    // If user is a Mongoose document, convert to object first\n    const userObject = typeof user.toObject === 'function' ? user.toObject() : user;\n    const { password, __v, ...sanitizedUser } = userObject; // Remove password and __v\n    return sanitizedUser;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./models/user.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprompts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cprompts%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprompts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cprompts%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_prompts_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\prompts\\index.js */ \"(api-node)/./pages/api/prompts/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_prompts_index_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_prompts_index_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_prompts_index_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_prompts_index_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/prompts\",\n        pathname: \"/api/prompts\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_prompts_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGcHJvbXB0cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDcHJvbXB0cyU1Q2luZGV4LmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNFO0FBQzFEO0FBQzREO0FBQzVEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx3REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsd0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IseUdBQW1CO0FBQ2xEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxccHJvbXB0c1xcXFxpbmRleC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCAnZGVmYXVsdCcpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgJ2NvbmZpZycpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcHJvbXB0c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Byb21wdHNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprompts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cprompts%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/prompts/index.js":
/*!************************************!*\
  !*** ./pages/api/prompts/index.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/auth */ \"(api-node)/./lib/auth.js\");\n/* harmony import */ var _models_prompt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../models/prompt */ \"(api-node)/./models/prompt.js\");\n/* harmony import */ var _lib_repositories_promptRepository__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/repositories/promptRepository */ \"(api-node)/./lib/repositories/promptRepository.js\");\n/* harmony import */ var _models_team__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../models/team */ \"(api-node)/./models/team.js\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/db */ \"(api-node)/./lib/db.js\");\n/* harmony import */ var next_auth_jwt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next-auth/jwt */ \"next-auth/jwt\");\n/* harmony import */ var next_auth_jwt__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_auth_jwt__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _lib_mongoose__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../lib/mongoose */ \"(api-node)/./lib/mongoose.js\");\n/* harmony import */ var _models_user__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../models/user */ \"(api-node)/./models/user.js\");\n/* harmony import */ var _models_auditLog__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../models/auditLog */ \"(api-node)/./models/auditLog.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_4__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n // Import User model if needed for validation/population\n // Import Team model\n // Import audit log helper\n// Define limits for different plans\nconst USER_PLAN_LIMITS = {\n    Free: {\n        promptLimit: 10\n    },\n    Pro: {\n        promptLimit: Infinity\n    } // Pro users have unlimited personal prompts\n};\n// We might not need this duplicate constant if Team model defines its own limits\n// const FREE_PLAN_PROMPT_LIMIT = 10; \nasync function handler(req, res) {\n    // Ensure DB Connection for all methods? Seems reasonable.\n    // Although GET might work without it if data is cached, POST needs it.\n    // Let's connect within each handler where needed for clarity.\n    // Get session/token - needed for GET auth logic\n    const token = await (0,next_auth_jwt__WEBPACK_IMPORTED_MODULE_5__.getToken)({\n        req,\n        secret: process.env.NEXTAUTH_SECRET\n    });\n    // Attach session-like object to req for consistency within handlers\n    // Note: withAuthForMethods might handle this differently, adjust if needed\n    req.session = token;\n    // Set cache control headers to prevent caching\n    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n    res.setHeader('Pragma', 'no-cache');\n    res.setHeader('Expires', '0');\n    switch(req.method){\n        case 'GET':\n            return getPrompts(req, res);\n        case 'POST':\n            // Auth for POST is handled by withAuthForMethods wrapper below\n            return addPrompt(req, res);\n        default:\n            return res.status(405).json({\n                message: 'Method not allowed'\n            });\n    }\n}\nasync function getPrompts(req, res) {\n    try {\n        // Get query parameters for filtering\n        const { userId, visibility, aiPlatform, tags, teamId, q } = req.query;\n        // Get the current user ID if authenticated (from token attached in main handler)\n        const currentUserId = req.session?.sub || null;\n        await (0,_lib_mongoose__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n        // Base query object from direct query params\n        const baseQuery = {};\n        if (aiPlatform) baseQuery.platformCompatibility = aiPlatform; // Match schema field\n        if (tags) baseQuery.tags = {\n            $in: Array.isArray(tags) ? tags : [\n                tags\n            ]\n        };\n        if (userId) baseQuery.creator = userId; // Match schema field ('creator')\n        // Add text search if 'q' parameter exists\n        if (q && typeof q === 'string' && q.trim()) {\n            baseQuery.$text = {\n                $search: q.trim()\n            };\n        // Ensure PromptSchema.index({ title: 'text', text: 'text', description: 'text' }); exists\n        }\n        // Authorization / Visibility Query Construction\n        let finalQuery = {\n            ...baseQuery\n        }; // Start with base filters\n        if (currentUserId) {\n            // Authenticated user\n            let userTeamIds = [];\n            try {\n                // Find teams where the current user is a member\n                const teams = await _models_team__WEBPACK_IMPORTED_MODULE_3__[\"default\"].find({\n                    'members.user': currentUserId\n                }).select('_id');\n                userTeamIds = teams.map((t)=>t._id);\n            } catch (teamError) {\n                console.error(\"Error fetching user's teams:\", teamError);\n            // Proceed without team prompts if this fails\n            }\n            // If a specific teamId is requested via query param, override general visibility logic\n            if (teamId) {\n                // Check if user is actually a member of the requested teamId\n                const isMemberOfRequestedTeam = userTeamIds.some((id)=>id.equals(teamId));\n                if (!isMemberOfRequestedTeam) {\n                    return res.status(403).json({\n                        message: 'Not authorized to view prompts for this specific team'\n                    });\n                }\n                // If member, add teamId to the query and proceed\n                finalQuery.teamId = teamId;\n            // Optionally enforce visibility match if desired\n            // finalQuery.visibility = 'team'; \n            } else {\n                // No specific team requested, apply general visibility rules\n                finalQuery.$or = [\n                    {\n                        visibility: 'public'\n                    },\n                    {\n                        creator: currentUserId,\n                        visibility: 'private'\n                    },\n                    ...userTeamIds.length > 0 ? [\n                        {\n                            teamId: {\n                                $in: userTeamIds\n                            },\n                            visibility: 'team'\n                        }\n                    ] : [] // Team prompts if member of any teams\n                ];\n                // If a specific visibility was requested, it should constrain the $or results\n                if (visibility) {\n                    // Ensure the requested visibility is allowed by the $or conditions\n                    const allowedVisibilities = [\n                        'public'\n                    ];\n                    if (finalQuery.$or.some((cond)=>cond.creator === currentUserId)) allowedVisibilities.push('private');\n                    if (finalQuery.$or.some((cond)=>cond.teamId)) allowedVisibilities.push('team');\n                    if (allowedVisibilities.includes(visibility)) {\n                        finalQuery.visibility = visibility;\n                    } else {\n                        // If requested visibility isn't possible based on auth, return empty\n                        // Or maybe just ignore the filter? For now, let's return empty.\n                        return res.status(200).json([]);\n                    }\n                }\n            }\n        // Implicit $and for creator filter if present in baseQuery\n        } else {\n            // Unauthenticated user: Only public prompts\n            finalQuery.visibility = 'public';\n            // Prevent unauth users from querying specific teams\n            if (teamId) {\n                return res.status(403).json({\n                    message: 'Authentication required to view team prompts'\n                });\n            }\n        // Implicit $and for creator filter allows viewing specific user's public prompts\n        }\n        // Determine sort order\n        let sortOrder = {\n            createdAt: -1\n        }; // Default sort\n        if (q && typeof q === 'string' && q.trim()) {\n            sortOrder = {\n                score: {\n                    $meta: \"textScore\"\n                }\n            }; // Sort by relevance if searching\n        }\n        // Execute the final query\n        const prompts = await _models_prompt__WEBPACK_IMPORTED_MODULE_1__[\"default\"].find(finalQuery).populate('creator', 'name email').populate('teamId', 'name').sort(sortOrder); // Apply sort order\n        return res.status(200).json(prompts);\n    } catch (error) {\n        console.error('Error getting prompts:', error);\n        if (error.name === 'CastError') {\n            return res.status(400).json({\n                message: 'Invalid ID format in query parameters'\n            });\n        }\n        return res.status(500).json({\n            message: 'Internal server error'\n        });\n    }\n}\nasync function addPrompt(req, res) {\n    console.log('API Received Body:', req.body); // Log the raw request body\n    const userId = req.session?.sub;\n    if (!userId) {\n        return res.status(401).json({\n            message: 'Unauthorized: User not authenticated'\n        });\n    }\n    try {\n        await (0,_lib_mongoose__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n        const promptDataFromRequest = req.body;\n        // Use the raw request data directly for validation, as it already contains 'text'\n        const promptDataForValidation = {\n            ...promptDataFromRequest\n        };\n        // --- Explicit Validation --- \n        // Validate the mapped data\n        const { isValid, errors: validationErrors } = (0,_models_prompt__WEBPACK_IMPORTED_MODULE_1__.validatePrompt)(promptDataForValidation, false);\n        if (!isValid) {\n            console.warn('Prompt validation failed in API:', validationErrors);\n            return res.status(400).json({\n                message: 'Validation failed',\n                errors: validationErrors\n            });\n        }\n        // --- End Explicit Validation ---\n        // Use the mapped data for limit checks and saving\n        const { visibility, teamId } = promptDataForValidation;\n        // --- Limit Enforcement --- \n        if (visibility === 'team') {\n            if (!teamId) {\n                return res.status(400).json({\n                    message: 'Team ID is required for team visibility'\n                });\n            }\n            // Fetch the team and check membership\n            const team = await _models_team__WEBPACK_IMPORTED_MODULE_3__[\"default\"].findOne({\n                _id: teamId,\n                'members.user': userId\n            }).select('promptLimit plan members.$');\n            if (!team) {\n                return res.status(403).json({\n                    message: 'You are not a member of the specified team or team does not exist.'\n                });\n            }\n            // Count existing prompts for this team\n            const teamPromptCount = await _models_prompt__WEBPACK_IMPORTED_MODULE_1__[\"default\"].countDocuments({\n                teamId: teamId\n            });\n            // Check team limit\n            if (teamPromptCount >= team.promptLimit) {\n                console.log(`Team ${teamId} (${team.plan} Plan) reached prompt limit (${teamPromptCount}/${team.promptLimit})`);\n                return res.status(403).json({\n                    message: `Team prompt limit of ${team.promptLimit} reached. The team owner or an admin may need to upgrade the plan or delete prompts.`,\n                    limitReached: true,\n                    scope: 'team'\n                });\n            }\n            console.log(`Team ${teamId} check OK (${teamPromptCount}/${team.promptLimit})`);\n        } else {\n            const user = await _models_user__WEBPACK_IMPORTED_MODULE_7__[\"default\"].findById(userId).select('plan promptCount');\n            if (!user) {\n                console.error(`AddPrompt Error: User not found in DB for ID: ${userId}`);\n                return res.status(404).json({\n                    message: 'User not found'\n                });\n            }\n            const userLimit = USER_PLAN_LIMITS[user.plan]?.promptLimit ?? USER_PLAN_LIMITS['Free'].promptLimit; // Fallback to free limit\n            if (user.promptCount >= userLimit) {\n                console.log(`User ${userId} (${user.plan} Plan) reached personal prompt limit (${user.promptCount}/${userLimit})`);\n                return res.status(403).json({\n                    message: `Your personal prompt limit of ${userLimit} has been reached. Please upgrade to Pro or delete some prompts.`,\n                    limitReached: true,\n                    scope: 'user'\n                });\n            }\n            console.log(`User ${userId} check OK (${user.promptCount}/${userLimit})`);\n        }\n        // --- End Limit Enforcement ---\n        // Clear teamId if visibility is not team \n        if (visibility !== 'team') {\n            promptDataForValidation.teamId = undefined;\n        }\n        // Create new prompt instance using the mapped data\n        const newPrompt = new _models_prompt__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            ...promptDataForValidation,\n            creator: userId\n        });\n        // Save the prompt\n        const savedPrompt = await newPrompt.save();\n        // --- Audit Log --- \n        await (0,_models_auditLog__WEBPACK_IMPORTED_MODULE_8__.logAuditEvent)({\n            userId: userId,\n            action: 'create_prompt',\n            targetType: 'prompt',\n            targetId: savedPrompt._id.toString(),\n            details: {\n                title: savedPrompt.title,\n                visibility: savedPrompt.visibility,\n                teamId: savedPrompt.teamId?.toString()\n            }\n        });\n        // --- End Audit Log ---\n        // --- Increment User Prompt Count (Always increment user's count) ---\n        await _models_user__WEBPACK_IMPORTED_MODULE_7__[\"default\"].updateOne({\n            _id: userId\n        }, {\n            $inc: {\n                promptCount: 1\n            }\n        });\n        console.log(`Successfully incremented prompt count for user ${userId}`);\n        // --- End Increment ---\n        console.log('Successfully created prompt:', savedPrompt._id);\n        // Populate and return\n        const populatedPrompt = await _models_prompt__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findById(savedPrompt._id).populate('creator', 'name email plan promptCount') // Include user plan/count?\n        .populate('teamId', 'name plan promptLimit'); // Include team plan/limit?\n        return res.status(201).json(populatedPrompt);\n    } catch (error) {\n        console.error('Error creating prompt:', error);\n        if (error.name === 'ValidationError') {\n            // Log the specific validation errors for debugging\n            console.error('Mongoose Validation Errors:', error.errors);\n            const errors = Object.values(error.errors).map((el)=>el.message);\n            return res.status(400).json({\n                message: 'Validation failed',\n                errors\n            });\n        }\n        if (error.name === 'CastError') {\n            return res.status(400).json({\n                message: 'Invalid Team ID format provided'\n            });\n        }\n        return res.status(500).json({\n            message: 'Internal server error while creating prompt'\n        });\n    }\n}\n// Apply authentication ONLY to POST method (GET is handled internally)\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_auth__WEBPACK_IMPORTED_MODULE_0__.withAuthForMethods)(handler, [\n    'POST'\n]));\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/prompts/index.js\n");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = import("bcryptjs");;

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("mongoose");

/***/ }),

/***/ "next-auth/jwt":
/*!********************************!*\
  !*** external "next-auth/jwt" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("next-auth/jwt");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprompts&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cprompts%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();