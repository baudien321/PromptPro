"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/collections";
exports.ids = ["pages/api/collections"];
exports.modules = {

/***/ "(api-node)/./lib/auth-utils.js":
/*!***************************!*\
  !*** ./lib/auth-utils.js ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([bcryptjs__WEBPACK_IMPORTED_MODULE_0__]);\nbcryptjs__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/**\n * Hash a password using bcrypt\n * @param {string} password - Plain text password to hash\n * @returns {Promise<string>} - Hashed password\n */ const hashPassword = async (password)=>{\n    const salt = await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].genSalt(12);\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(password, salt);\n};\n/**\n * Verify a password against a hash\n * @param {string} password - Plain text password to check\n * @param {string} hash - Hashed password to compare against\n * @returns {Promise<boolean>} - True if password matches hash\n */ const verifyPassword = async (password, hash)=>{\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compare(password, hash);\n};\n/**\n * Generate a random token (e.g., for email confirmation, password reset)\n * @param {number} length - Length of the token\n * @returns {string} - Random token\n */ const generateToken = (length = 32)=>{\n    return crypto__WEBPACK_IMPORTED_MODULE_1___default().randomBytes(length).toString('hex');\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9hdXRoLXV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUE4QjtBQUNGO0FBRTVCOzs7O0NBSUMsR0FDTSxNQUFNRSxlQUFlLE9BQU9DO0lBQ2pDLE1BQU1DLE9BQU8sTUFBTUosd0RBQWMsQ0FBQztJQUNsQyxPQUFPQSxxREFBVyxDQUFDRyxVQUFVQztBQUMvQixFQUFFO0FBRUY7Ozs7O0NBS0MsR0FDTSxNQUFNRyxpQkFBaUIsT0FBT0osVUFBVUc7SUFDN0MsT0FBT04sd0RBQWMsQ0FBQ0csVUFBVUc7QUFDbEMsRUFBRTtBQUVGOzs7O0NBSUMsR0FDTSxNQUFNRyxnQkFBZ0IsQ0FBQ0MsU0FBUyxFQUFFO0lBQ3ZDLE9BQU9ULHlEQUFrQixDQUFDUyxRQUFRRSxRQUFRLENBQUM7QUFDN0MsRUFBRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxiYXVkaVxcT25lRHJpdmVcXERlc2t0b3BcXFByb21wdFByb1xcUHJvbXB0UHJvXFxsaWJcXGF1dGgtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbi8qKlxuICogSGFzaCBhIHBhc3N3b3JkIHVzaW5nIGJjcnlwdFxuICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIC0gUGxhaW4gdGV4dCBwYXNzd29yZCB0byBoYXNoXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSAtIEhhc2hlZCBwYXNzd29yZFxuICovXG5leHBvcnQgY29uc3QgaGFzaFBhc3N3b3JkID0gYXN5bmMgKHBhc3N3b3JkKSA9PiB7XG4gIGNvbnN0IHNhbHQgPSBhd2FpdCBiY3J5cHQuZ2VuU2FsdCgxMik7XG4gIHJldHVybiBiY3J5cHQuaGFzaChwYXNzd29yZCwgc2FsdCk7XG59O1xuXG4vKipcbiAqIFZlcmlmeSBhIHBhc3N3b3JkIGFnYWluc3QgYSBoYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgLSBQbGFpbiB0ZXh0IHBhc3N3b3JkIHRvIGNoZWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaCAtIEhhc2hlZCBwYXNzd29yZCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSAtIFRydWUgaWYgcGFzc3dvcmQgbWF0Y2hlcyBoYXNoXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJpZnlQYXNzd29yZCA9IGFzeW5jIChwYXNzd29yZCwgaGFzaCkgPT4ge1xuICByZXR1cm4gYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIGhhc2gpO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSB0b2tlbiAoZS5nLiwgZm9yIGVtYWlsIGNvbmZpcm1hdGlvbiwgcGFzc3dvcmQgcmVzZXQpXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gTGVuZ3RoIG9mIHRoZSB0b2tlblxuICogQHJldHVybnMge3N0cmluZ30gLSBSYW5kb20gdG9rZW5cbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlVG9rZW4gPSAobGVuZ3RoID0gMzIpID0+IHtcbiAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhsZW5ndGgpLnRvU3RyaW5nKCdoZXgnKTtcbn07Il0sIm5hbWVzIjpbImJjcnlwdCIsImNyeXB0byIsImhhc2hQYXNzd29yZCIsInBhc3N3b3JkIiwic2FsdCIsImdlblNhbHQiLCJoYXNoIiwidmVyaWZ5UGFzc3dvcmQiLCJjb21wYXJlIiwiZ2VuZXJhdGVUb2tlbiIsImxlbmd0aCIsInJhbmRvbUJ5dGVzIiwidG9TdHJpbmciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth-utils.js\n");

/***/ }),

/***/ "(api-node)/./lib/auth.js":
/*!*********************!*\
  !*** ./lib/auth.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAuthSession: () => (/* binding */ getAuthSession),\n/* harmony export */   withAuth: () => (/* binding */ withAuth),\n/* harmony export */   withAuthForMethods: () => (/* binding */ withAuthForMethods)\n/* harmony export */ });\n/* harmony import */ var next_auth_jwt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/jwt */ \"next-auth/jwt\");\n/* harmony import */ var next_auth_jwt__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_jwt__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Check if the request is authenticated\n * @param {Object} req - The request object\n * @returns {Promise<Object|null>} - The user session or null if not authenticated\n */ async function getAuthSession(req) {\n    return await (0,next_auth_jwt__WEBPACK_IMPORTED_MODULE_0__.getToken)({\n        req,\n        secret: process.env.NEXTAUTH_SECRET\n    });\n}\n/**\n * Higher-order function that creates an API handler that requires authentication\n * @param {Function} handler - The API handler to protect\n * @returns {Function} - The protected API handler\n */ function withAuth(handler) {\n    return async (req, res)=>{\n        const session = await getAuthSession(req);\n        if (!session) {\n            return res.status(401).json({\n                error: \"Unauthorized\"\n            });\n        }\n        // Add the session to the request object\n        req.session = session;\n        // Also add a user property for compatibility\n        req.user = {\n            id: session.sub || session.id,\n            name: session.name,\n            email: session.email\n        };\n        // Call the original handler\n        return handler(req, res);\n    };\n}\n/**\n * Higher-order function that optionally requires authentication for certain methods\n * @param {Function} handler - The API handler \n * @param {Array} protectedMethods - HTTP methods that require authentication (e.g., ['POST', 'PUT', 'DELETE'])\n * @returns {Function} - The conditionally protected API handler\n */ function withAuthForMethods(handler, protectedMethods = [\n    'POST',\n    'PUT',\n    'DELETE'\n]) {\n    return async (req, res)=>{\n        // Check if the current method requires authentication\n        if (protectedMethods.includes(req.method)) {\n            const session = await getAuthSession(req);\n            if (!session) {\n                return res.status(401).json({\n                    error: \"Unauthorized\"\n                });\n            }\n            // Add the session to the request object\n            req.session = session;\n            // Also add a user property for compatibility\n            req.user = {\n                id: session.sub || session.id,\n                name: session.name,\n                email: session.email\n            };\n        }\n        // Call the original handler\n        return handler(req, res);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9hdXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlDO0FBRXpDOzs7O0NBSUMsR0FDTSxlQUFlQyxlQUFlQyxHQUFHO0lBQ3RDLE9BQU8sTUFBTUYsdURBQVFBLENBQUM7UUFBRUU7UUFBS0MsUUFBUUMsUUFBUUMsR0FBRyxDQUFDQyxlQUFlO0lBQUM7QUFDbkU7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0MsU0FBU0MsT0FBTztJQUM5QixPQUFPLE9BQU9OLEtBQUtPO1FBQ2pCLE1BQU1DLFVBQVUsTUFBTVQsZUFBZUM7UUFFckMsSUFBSSxDQUFDUSxTQUFTO1lBQ1osT0FBT0QsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUFlO1FBQ3REO1FBRUEsd0NBQXdDO1FBQ3hDWCxJQUFJUSxPQUFPLEdBQUdBO1FBRWQsNkNBQTZDO1FBQzdDUixJQUFJWSxJQUFJLEdBQUc7WUFDVEMsSUFBSUwsUUFBUU0sR0FBRyxJQUFJTixRQUFRSyxFQUFFO1lBQzdCRSxNQUFNUCxRQUFRTyxJQUFJO1lBQ2xCQyxPQUFPUixRQUFRUSxLQUFLO1FBQ3RCO1FBRUEsNEJBQTRCO1FBQzVCLE9BQU9WLFFBQVFOLEtBQUtPO0lBQ3RCO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNNLFNBQVNVLG1CQUFtQlgsT0FBTyxFQUFFWSxtQkFBbUI7SUFBQztJQUFRO0lBQU87Q0FBUztJQUN0RixPQUFPLE9BQU9sQixLQUFLTztRQUNqQixzREFBc0Q7UUFDdEQsSUFBSVcsaUJBQWlCQyxRQUFRLENBQUNuQixJQUFJb0IsTUFBTSxHQUFHO1lBQ3pDLE1BQU1aLFVBQVUsTUFBTVQsZUFBZUM7WUFFckMsSUFBSSxDQUFDUSxTQUFTO2dCQUNaLE9BQU9ELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7b0JBQUVDLE9BQU87Z0JBQWU7WUFDdEQ7WUFFQSx3Q0FBd0M7WUFDeENYLElBQUlRLE9BQU8sR0FBR0E7WUFFZCw2Q0FBNkM7WUFDN0NSLElBQUlZLElBQUksR0FBRztnQkFDVEMsSUFBSUwsUUFBUU0sR0FBRyxJQUFJTixRQUFRSyxFQUFFO2dCQUM3QkUsTUFBTVAsUUFBUU8sSUFBSTtnQkFDbEJDLE9BQU9SLFFBQVFRLEtBQUs7WUFDdEI7UUFDRjtRQUVBLDRCQUE0QjtRQUM1QixPQUFPVixRQUFRTixLQUFLTztJQUN0QjtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGJhdWRpXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvbXB0UHJvXFxQcm9tcHRQcm9cXGxpYlxcYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRUb2tlbiB9IGZyb20gXCJuZXh0LWF1dGgvand0XCI7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHJlcXVlc3QgaXMgYXV0aGVudGljYXRlZFxuICogQHBhcmFtIHtPYmplY3R9IHJlcSAtIFRoZSByZXF1ZXN0IG9iamVjdFxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSAtIFRoZSB1c2VyIHNlc3Npb24gb3IgbnVsbCBpZiBub3QgYXV0aGVudGljYXRlZFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QXV0aFNlc3Npb24ocmVxKSB7XG4gIHJldHVybiBhd2FpdCBnZXRUb2tlbih7IHJlcSwgc2VjcmV0OiBwcm9jZXNzLmVudi5ORVhUQVVUSF9TRUNSRVQgfSk7XG59XG5cbi8qKlxuICogSGlnaGVyLW9yZGVyIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhbiBBUEkgaGFuZGxlciB0aGF0IHJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gVGhlIEFQSSBoYW5kbGVyIHRvIHByb3RlY3RcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gLSBUaGUgcHJvdGVjdGVkIEFQSSBoYW5kbGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoQXV0aChoYW5kbGVyKSB7XG4gIHJldHVybiBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgZ2V0QXV0aFNlc3Npb24ocmVxKTtcbiAgICBcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiBcIlVuYXV0aG9yaXplZFwiIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBBZGQgdGhlIHNlc3Npb24gdG8gdGhlIHJlcXVlc3Qgb2JqZWN0XG4gICAgcmVxLnNlc3Npb24gPSBzZXNzaW9uO1xuICAgIFxuICAgIC8vIEFsc28gYWRkIGEgdXNlciBwcm9wZXJ0eSBmb3IgY29tcGF0aWJpbGl0eVxuICAgIHJlcS51c2VyID0ge1xuICAgICAgaWQ6IHNlc3Npb24uc3ViIHx8IHNlc3Npb24uaWQsXG4gICAgICBuYW1lOiBzZXNzaW9uLm5hbWUsXG4gICAgICBlbWFpbDogc2Vzc2lvbi5lbWFpbFxuICAgIH07XG4gICAgXG4gICAgLy8gQ2FsbCB0aGUgb3JpZ2luYWwgaGFuZGxlclxuICAgIHJldHVybiBoYW5kbGVyKHJlcSwgcmVzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBIaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCBvcHRpb25hbGx5IHJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uIGZvciBjZXJ0YWluIG1ldGhvZHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBUaGUgQVBJIGhhbmRsZXIgXG4gKiBAcGFyYW0ge0FycmF5fSBwcm90ZWN0ZWRNZXRob2RzIC0gSFRUUCBtZXRob2RzIHRoYXQgcmVxdWlyZSBhdXRoZW50aWNhdGlvbiAoZS5nLiwgWydQT1NUJywgJ1BVVCcsICdERUxFVEUnXSlcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gLSBUaGUgY29uZGl0aW9uYWxseSBwcm90ZWN0ZWQgQVBJIGhhbmRsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhBdXRoRm9yTWV0aG9kcyhoYW5kbGVyLCBwcm90ZWN0ZWRNZXRob2RzID0gWydQT1NUJywgJ1BVVCcsICdERUxFVEUnXSkge1xuICByZXR1cm4gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgbWV0aG9kIHJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKHByb3RlY3RlZE1ldGhvZHMuaW5jbHVkZXMocmVxLm1ldGhvZCkpIHtcbiAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRBdXRoU2Vzc2lvbihyZXEpO1xuICAgICAgXG4gICAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6IFwiVW5hdXRob3JpemVkXCIgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEFkZCB0aGUgc2Vzc2lvbiB0byB0aGUgcmVxdWVzdCBvYmplY3RcbiAgICAgIHJlcS5zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgIFxuICAgICAgLy8gQWxzbyBhZGQgYSB1c2VyIHByb3BlcnR5IGZvciBjb21wYXRpYmlsaXR5XG4gICAgICByZXEudXNlciA9IHtcbiAgICAgICAgaWQ6IHNlc3Npb24uc3ViIHx8IHNlc3Npb24uaWQsXG4gICAgICAgIG5hbWU6IHNlc3Npb24ubmFtZSxcbiAgICAgICAgZW1haWw6IHNlc3Npb24uZW1haWxcbiAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8vIENhbGwgdGhlIG9yaWdpbmFsIGhhbmRsZXJcbiAgICByZXR1cm4gaGFuZGxlcihyZXEsIHJlcyk7XG4gIH07XG59Il0sIm5hbWVzIjpbImdldFRva2VuIiwiZ2V0QXV0aFNlc3Npb24iLCJyZXEiLCJzZWNyZXQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVEFVVEhfU0VDUkVUIiwid2l0aEF1dGgiLCJoYW5kbGVyIiwicmVzIiwic2Vzc2lvbiIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsInVzZXIiLCJpZCIsInN1YiIsIm5hbWUiLCJlbWFpbCIsIndpdGhBdXRoRm9yTWV0aG9kcyIsInByb3RlY3RlZE1ldGhvZHMiLCJpbmNsdWRlcyIsIm1ldGhvZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth.js\n");

/***/ }),

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPromptToCollection: () => (/* binding */ addPromptToCollection),\n/* harmony export */   addTeamMember: () => (/* binding */ addTeamMember),\n/* harmony export */   createCollection: () => (/* binding */ createCollection),\n/* harmony export */   createComment: () => (/* binding */ createComment),\n/* harmony export */   createPrompt: () => (/* binding */ createPrompt),\n/* harmony export */   createTeam: () => (/* binding */ createTeam),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   deleteCollection: () => (/* binding */ deleteCollection),\n/* harmony export */   deleteComment: () => (/* binding */ deleteComment),\n/* harmony export */   deletePrompt: () => (/* binding */ deletePrompt),\n/* harmony export */   deleteTeam: () => (/* binding */ deleteTeam),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   getAllCollections: () => (/* binding */ getAllCollections),\n/* harmony export */   getAllPrompts: () => (/* binding */ getAllPrompts),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getCollectionById: () => (/* binding */ getCollectionById),\n/* harmony export */   getCommentsByPromptId: () => (/* binding */ getCommentsByPromptId),\n/* harmony export */   getPromptById: () => (/* binding */ getPromptById),\n/* harmony export */   getTeamById: () => (/* binding */ getTeamById),\n/* harmony export */   getTeamsByUserId: () => (/* binding */ getTeamsByUserId),\n/* harmony export */   getUserByEmail: () => (/* binding */ getUserByEmail),\n/* harmony export */   getUserById: () => (/* binding */ getUserById),\n/* harmony export */   removePromptFromCollection: () => (/* binding */ removePromptFromCollection),\n/* harmony export */   removeTeamMember: () => (/* binding */ removeTeamMember),\n/* harmony export */   updateCollection: () => (/* binding */ updateCollection),\n/* harmony export */   updateComment: () => (/* binding */ updateComment),\n/* harmony export */   updatePrompt: () => (/* binding */ updatePrompt),\n/* harmony export */   updateTeam: () => (/* binding */ updateTeam),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n/* harmony import */ var _mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mongodb */ \"(api-node)/./lib/mongodb.js\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth-utils */ \"(api-node)/./lib/auth-utils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_utils__WEBPACK_IMPORTED_MODULE_2__]);\n_auth_utils__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n // Assuming auth-utils handles password hashing\n/**\n * Helper function to get the database and collections.\n */ async function getCollections() {\n    const { db } = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.connectToDatabase)();\n    return {\n        users: db.collection('users'),\n        prompts: db.collection('prompts'),\n        collections: db.collection('collections'),\n        teams: db.collection('teams'),\n        comments: db.collection('comments')\n    };\n}\n/**\n * Helper function to convert string ID to ObjectId.\n * Returns null if the ID is invalid.\n */ function toObjectId(id) {\n    if (!id || !mongodb__WEBPACK_IMPORTED_MODULE_1__.ObjectId.isValid(id)) {\n        return null;\n    }\n    try {\n        return new mongodb__WEBPACK_IMPORTED_MODULE_1__.ObjectId(id);\n    } catch (error) {\n        // Handle potential errors during ObjectId creation if needed\n        console.error(\"Error creating ObjectId:\", error);\n        return null;\n    }\n}\n// --- Prompt Functions ---\nconst getAllPrompts = async (filter = {}, options = {})=>{\n    try {\n        const { prompts } = await getCollections();\n        const cursor = prompts.find(filter);\n        // Add sorting if specified in options\n        if (options.sort) {\n            cursor.sort(options.sort);\n        } else {\n            cursor.sort({\n                createdAt: -1\n            }); // Default sort: newest first\n        }\n        // Add limit if specified\n        if (options.limit) {\n            cursor.limit(options.limit);\n        }\n        // Add skip for pagination if specified\n        if (options.skip) {\n            cursor.skip(options.skip);\n        }\n        const allPrompts = await cursor.toArray();\n        return allPrompts;\n    } catch (error) {\n        console.error(\"Error fetching all prompts:\", error);\n        throw new Error(\"Database error while fetching prompts.\");\n    }\n};\nconst getPromptById = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { prompts } = await getCollections();\n        const prompt = await prompts.findOne({\n            _id: objectId\n        });\n        return prompt;\n    } catch (error) {\n        console.error(\"Error fetching prompt by ID:\", error);\n        throw new Error(\"Database error while fetching prompt.\");\n    }\n};\nconst createPrompt = async (promptData)=>{\n    try {\n        const { prompts } = await getCollections();\n        const now = new Date();\n        const newPrompt = {\n            title: promptData.title,\n            content: promptData.content,\n            description: promptData.description || '',\n            tags: promptData.tags || [],\n            aiPlatform: promptData.aiPlatform || 'ChatGPT',\n            rating: promptData.rating || 0,\n            usageCount: promptData.usageCount || 0,\n            successRate: promptData.successRate || 0,\n            visibility: promptData.visibility || 'private',\n            userId: promptData.userId,\n            createdBy: promptData.createdBy,\n            teamId: promptData.teamId ? toObjectId(promptData.teamId) : null,\n            createdAt: now,\n            updatedAt: now\n        };\n        const result = await prompts.insertOne(newPrompt);\n        return {\n            ...newPrompt,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating prompt:\", error);\n        throw new Error(\"Database error while creating prompt.\");\n    }\n};\nconst updatePrompt = async (id, promptData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { prompts } = await getCollections();\n        const updateDoc = {\n            $set: {}\n        };\n        // Add fields to update only if they are provided\n        for (const key of [\n            'title',\n            'content',\n            'description',\n            'tags',\n            'aiPlatform',\n            'rating',\n            'usageCount',\n            'successRate',\n            'visibility',\n            'createdBy'\n        ]){\n            if (promptData[key] !== undefined) {\n                updateDoc.$set[key] = promptData[key];\n            }\n        }\n        // Handle teamId separately - allow setting to null or a valid ObjectId\n        if (promptData.teamId !== undefined) {\n            updateDoc.$set.teamId = promptData.teamId ? toObjectId(promptData.teamId) : null;\n        }\n        // Don't update userId or createdAt\n        updateDoc.$set.updatedAt = new Date();\n        if (Object.keys(updateDoc.$set).length === 1) {\n            // Maybe skip update if only timestamp changes?\n            return prompts.findOne({\n                _id: objectId\n            }); // Return current doc\n        }\n        const result = await prompts.updateOne({\n            _id: objectId\n        }, updateDoc);\n        if (result.matchedCount === 0) {\n            return null; // Prompt not found\n        }\n        const updatedPrompt = await prompts.findOne({\n            _id: objectId\n        });\n        return updatedPrompt;\n    } catch (error) {\n        console.error(\"Error updating prompt:\", error);\n        throw new Error(\"Database error while updating prompt.\");\n    }\n};\nconst deletePrompt = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { prompts } = await getCollections();\n        // TODO: Consider deleting associated comments or handling dependencies\n        const result = await prompts.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting prompt:\", error);\n        throw new Error(\"Database error while deleting prompt.\");\n    }\n};\n// TODO: Implement searchPrompts using MongoDB's text search or complex filtering\n// export const searchPrompts = async (query, options = {}) => { ... };\n// --- Collection Functions ---\nconst getAllCollections = async (filter = {}, options = {})=>{\n    try {\n        const { collections } = await getCollections();\n        const cursor = collections.find(filter);\n        if (options.sort) cursor.sort(options.sort);\n        if (options.limit) cursor.limit(options.limit);\n        if (options.skip) cursor.skip(options.skip);\n        const allCollections = await cursor.toArray();\n        return allCollections;\n    } catch (error) {\n        console.error(\"Error fetching all collections:\", error);\n        throw new Error(\"Database error while fetching collections.\");\n    }\n};\nconst getCollectionById = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { collections } = await getCollections();\n        // Optionally use aggregation to populate prompts if needed immediately\n        const collection = await collections.findOne({\n            _id: objectId\n        });\n        return collection;\n    } catch (error) {\n        console.error(\"Error fetching collection by ID:\", error);\n        throw new Error(\"Database error while fetching collection.\");\n    }\n};\nconst createCollection = async (collectionData)=>{\n    try {\n        const { collections } = await getCollections();\n        const now = new Date();\n        const newCollection = {\n            name: collectionData.name,\n            description: collectionData.description || '',\n            userId: collectionData.userId,\n            prompts: [],\n            createdAt: now,\n            updatedAt: now\n        };\n        const result = await collections.insertOne(newCollection);\n        return {\n            ...newCollection,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating collection:\", error);\n        throw new Error(\"Database error while creating collection.\");\n    }\n};\nconst updateCollection = async (id, collectionData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { collections } = await getCollections();\n        const updateDoc = {\n            $set: {}\n        };\n        if (collectionData.name !== undefined) updateDoc.$set.name = collectionData.name;\n        if (collectionData.description !== undefined) updateDoc.$set.description = collectionData.description;\n        // Note: Managing the 'prompts' array (add/remove) typically done via separate functions\n        updateDoc.$set.updatedAt = new Date();\n        if (Object.keys(updateDoc.$set).length > 1) {\n            const result = await collections.updateOne({\n                _id: objectId\n            }, updateDoc);\n            if (result.matchedCount === 0) return null;\n        }\n        const updatedCollection = await collections.findOne({\n            _id: objectId\n        });\n        return updatedCollection;\n    } catch (error) {\n        console.error(\"Error updating collection:\", error);\n        throw new Error(\"Database error while updating collection.\");\n    }\n};\nconst deleteCollection = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { collections } = await getCollections();\n        const result = await collections.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting collection:\", error);\n        throw new Error(\"Database error while deleting collection.\");\n    }\n};\nconst addPromptToCollection = async (collectionId, promptId)=>{\n    const collObjectId = toObjectId(collectionId);\n    const promptObjectId = toObjectId(promptId);\n    if (!collObjectId || !promptObjectId) return null;\n    try {\n        const { collections } = await getCollections();\n        // Use $addToSet to add the prompt's ObjectId to the array if not already present\n        const result = await collections.updateOne({\n            _id: collObjectId\n        }, {\n            $addToSet: {\n                prompts: promptObjectId\n            },\n            $set: {\n                updatedAt: new Date()\n            }\n        });\n        if (result.matchedCount === 0) return null; // Collection not found\n        const updatedCollection = await collections.findOne({\n            _id: collObjectId\n        });\n        return updatedCollection;\n    } catch (error) {\n        console.error(\"Error adding prompt to collection:\", error);\n        throw new Error(\"Database error while adding prompt to collection.\");\n    }\n};\nconst removePromptFromCollection = async (collectionId, promptId)=>{\n    const collObjectId = toObjectId(collectionId);\n    const promptObjectId = toObjectId(promptId);\n    if (!collObjectId || !promptObjectId) return null;\n    try {\n        const { collections } = await getCollections();\n        // Use $pull to remove the prompt's ObjectId from the array\n        const result = await collections.updateOne({\n            _id: collObjectId\n        }, {\n            $pull: {\n                prompts: promptObjectId\n            },\n            $set: {\n                updatedAt: new Date()\n            }\n        });\n        if (result.matchedCount === 0) return null; // Collection not found\n        const updatedCollection = await collections.findOne({\n            _id: collObjectId\n        });\n        return updatedCollection;\n    } catch (error) {\n        console.error(\"Error removing prompt from collection:\", error);\n        throw new Error(\"Database error while removing prompt from collection.\");\n    }\n};\n// --- User Functions ---\n// Note: These are basic implementations. Authentication libraries often handle user management.\nconst getAllUsers = async (filter = {}, options = {})=>{\n    try {\n        const { users } = await getCollections();\n        // Exclude password field by default\n        const cursor = users.find(filter, {\n            projection: {\n                password: 0\n            }\n        });\n        if (options.sort) cursor.sort(options.sort);\n        if (options.limit) cursor.limit(options.limit);\n        if (options.skip) cursor.skip(options.skip);\n        const allUsers = await cursor.toArray();\n        return allUsers;\n    } catch (error) {\n        console.error(\"Error fetching all users:\", error);\n        throw new Error(\"Database error while fetching users.\");\n    }\n};\nconst getUserById = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { users } = await getCollections();\n        const user = await users.findOne({\n            _id: objectId\n        }, {\n            projection: {\n                password: 0\n            }\n        });\n        return user;\n    } catch (error) {\n        console.error(\"Error fetching user by ID:\", error);\n        throw new Error(\"Database error while fetching user.\");\n    }\n};\nconst getUserByEmail = async (email)=>{\n    if (!email) return null;\n    try {\n        const { users } = await getCollections();\n        // Find user by email, but DO include password for authentication checks\n        const user = await users.findOne({\n            email: email.toLowerCase()\n        });\n        return user;\n    } catch (error) {\n        console.error(\"Error fetching user by email:\", error);\n        throw new Error(\"Database error while fetching user.\");\n    }\n};\nconst createUser = async (userData)=>{\n    if (!userData.email || !userData.password) {\n        throw new Error(\"Email and password are required to create a user.\");\n    }\n    try {\n        const { users } = await getCollections();\n        const now = new Date();\n        // Check if user already exists\n        const existingUser = await users.findOne({\n            email: userData.email.toLowerCase()\n        });\n        if (existingUser) {\n            throw new Error(\"User with this email already exists.\");\n        }\n        // Hash password before storing\n        const hashedPassword = await (0,_auth_utils__WEBPACK_IMPORTED_MODULE_2__.hashPassword)(userData.password);\n        const newUser = {\n            name: userData.name || '',\n            email: userData.email.toLowerCase(),\n            password: hashedPassword,\n            image: userData.image || null,\n            // Add roles or other fields as needed\n            createdAt: now,\n            updatedAt: now\n        };\n        const result = await users.insertOne(newUser);\n        // Return user data without the password hash\n        const { password, ...userWithoutPassword } = newUser;\n        return {\n            ...userWithoutPassword,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating user:\", error);\n        // Rethrow specific errors or a generic one\n        if (error.message === \"User with this email already exists.\") {\n            throw error;\n        }\n        throw new Error(\"Database error while creating user.\");\n    }\n};\nconst updateUser = async (id, userData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { users } = await getCollections();\n        const updateDoc = {\n            $set: {}\n        };\n        if (userData.name !== undefined) updateDoc.$set.name = userData.name;\n        if (userData.image !== undefined) updateDoc.$set.image = userData.image;\n        // Add other updatable fields (e.g., roles)\n        // Handle email change carefully\n        if (userData.email && typeof userData.email === 'string') {\n            const newEmail = userData.email.toLowerCase();\n            const existingUser = await users.findOne({\n                email: newEmail\n            });\n            // Allow update only if email doesn't exist OR belongs to the current user\n            if (existingUser && !existingUser._id.equals(objectId)) {\n                throw new Error(\"Email address is already in use.\");\n            }\n            updateDoc.$set.email = newEmail;\n        }\n        // Do not allow password update through this general function\n        // Create a specific changePassword function if needed\n        updateDoc.$set.updatedAt = new Date();\n        if (Object.keys(updateDoc.$set).length > 1) {\n            const result = await users.updateOne({\n                _id: objectId\n            }, updateDoc);\n            if (result.matchedCount === 0) return null;\n        }\n        const updatedUser = await users.findOne({\n            _id: objectId\n        }, {\n            projection: {\n                password: 0\n            }\n        });\n        return updatedUser;\n    } catch (error) {\n        console.error(\"Error updating user:\", error);\n        if (error.message === \"Email address is already in use.\") {\n            throw error;\n        }\n        throw new Error(\"Database error while updating user.\");\n    }\n};\nconst deleteUser = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { users } = await getCollections();\n        // TODO: Handle related data cleanup (e.g., reassign prompts?)\n        const result = await users.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting user:\", error);\n        throw new Error(\"Database error while deleting user.\");\n    }\n};\n// --- Team Functions (already refactored) ---\nconst getTeamById = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null; // Invalid ID format\n    try {\n        const { teams } = await getCollections();\n        // Fetch team and potentially populate member details if needed later\n        const team = await teams.findOne({\n            _id: objectId\n        });\n        // Optionally convert member userIds back to string if needed for frontend\n        // if (team && team.members) {\n        //   team.members = team.members.map(member => ({ ...member, userId: member.userId.toString() }));\n        // }\n        // Convert main _id to string\n        // if (team) team._id = team._id.toString();\n        return team; // Returns the team document or null if not found\n    } catch (error) {\n        console.error(\"Error fetching team by ID:\", error);\n        throw new Error(\"Database error while fetching team.\");\n    }\n};\nconst getTeamsByUserId = async (userId)=>{\n    // Ensure userId is treated as a string for matching unless it's clearly an ObjectId\n    const userIdString = userId.toString();\n    const userObjectId = toObjectId(userId); // Attempt conversion\n    try {\n        const { teams } = await getCollections();\n        // Find teams where the user is the owner (userId field)\n        // OR the user is in the members array (assuming member.userId is stored as string)\n        const query = {\n            'members.userId': userIdString\n        };\n        // If the original userId was *also* the ownerId field, add that check\n        // This depends on how owner `userId` is stored (string vs ObjectId)\n        // Let's assume owner `userId` might match the string ID from session\n        const ownerQuery = {\n            userId: userIdString\n        };\n        // Combine queries\n        const finalQuery = {\n            $or: [\n                query,\n                ownerQuery\n            ]\n        };\n        // If the userId *was* a valid ObjectId, also check for ObjectId matches \n        // (in case some IDs are stored as ObjectIds)\n        if (userObjectId) {\n            finalQuery.$or.push({\n                'members.userId': userObjectId\n            });\n            finalQuery.$or.push({\n                userId: userObjectId\n            });\n        }\n        const userTeams = await teams.find(finalQuery).toArray();\n        return userTeams;\n    } catch (error) {\n        console.error(\"Error fetching teams by user ID:\", error);\n        throw new Error(\"Database error while fetching user's teams.\");\n    }\n};\nconst createTeam = async (teamData)=>{\n    try {\n        const { teams, users } = await getCollections();\n        const now = new Date();\n        const ownerUserId = teamData.userId; // Assume this is the string ID from session\n        // Fetch owner's name\n        let ownerName = 'Owner'; // Default\n        const ownerUser = await users.findOne({\n            _id: toObjectId(ownerUserId)\n        }, {\n            projection: {\n                name: 1\n            }\n        });\n        if (ownerUser && ownerUser.name) {\n            ownerName = ownerUser.name;\n        }\n        const newTeam = {\n            name: teamData.name,\n            description: teamData.description || '',\n            userId: ownerUserId,\n            members: [],\n            createdAt: now,\n            updatedAt: now\n        };\n        // Add creator as the owner\n        newTeam.members.push({\n            userId: ownerUserId,\n            role: 'owner',\n            joinedAt: now,\n            name: ownerName // Add owner's name\n        });\n        const result = await teams.insertOne(newTeam);\n        return {\n            ...newTeam,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating team:\", error);\n        throw new Error(\"Database error while creating team.\");\n    }\n};\nconst updateTeam = async (id, teamData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    try {\n        const { teams } = await getCollections();\n        const updateDoc = {\n            $set: {}\n        };\n        if (teamData.name !== undefined) updateDoc.$set.name = teamData.name;\n        if (teamData.description !== undefined) updateDoc.$set.description = teamData.description;\n        updateDoc.$set.updatedAt = new Date();\n        if (Object.keys(updateDoc.$set).length > 1) {\n            const result = await teams.updateOne({\n                _id: objectId\n            }, updateDoc);\n            if (result.matchedCount === 0) return null;\n        }\n        const updatedTeam = await teams.findOne({\n            _id: objectId\n        });\n        return updatedTeam;\n    } catch (error) {\n        console.error(\"Error updating team:\", error);\n        throw new Error(\"Database error while updating team.\");\n    }\n};\nconst deleteTeam = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { teams } = await getCollections();\n        // TODO: Handle related data cleanup (e.g., prompts belonging to team?)\n        const result = await teams.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting team:\", error);\n        throw new Error(\"Database error while deleting team.\");\n    }\n};\nconst addTeamMember = async (teamId, memberData)=>{\n    const teamObjectId = toObjectId(teamId);\n    if (!teamObjectId) return null;\n    if (!memberData || !memberData.userId) throw new Error(\"Member user ID is required.\");\n    const memberUserId = memberData.userId; // Assume string ID from request\n    try {\n        const { teams, users } = await getCollections();\n        const now = new Date();\n        // Fetch member's name\n        let memberName = 'Member'; // Default\n        const memberUser = await users.findOne({\n            _id: toObjectId(memberUserId)\n        }, {\n            projection: {\n                name: 1\n            }\n        });\n        if (memberUser && memberUser.name) {\n            memberName = memberUser.name;\n        }\n        const memberRecord = {\n            userId: memberUserId,\n            role: memberData.role || 'member',\n            joinedAt: now,\n            name: memberName // Add member's name\n        };\n        // Check if user is already a member (using the string ID)\n        const team = await teams.findOne({\n            _id: teamObjectId,\n            'members.userId': memberUserId\n        });\n        if (team) {\n            console.log(\"User is already a member of this team.\");\n            return team; // Already a member\n        }\n        // Use $addToSet (or $push if duplicates are impossible/undesired)\n        const result = await teams.updateOne({\n            _id: teamObjectId\n        }, {\n            $push: {\n                members: memberRecord\n            },\n            $set: {\n                updatedAt: now\n            }\n        });\n        if (result.matchedCount === 0) return null;\n        const updatedTeam = await teams.findOne({\n            _id: teamObjectId\n        });\n        return updatedTeam;\n    } catch (error) {\n        console.error(\"Error adding team member:\", error);\n        throw new Error(\"Database error while adding team member.\");\n    }\n};\nconst removeTeamMember = async (teamId, userIdToRemove)=>{\n    const teamObjectId = toObjectId(teamId);\n    if (!teamObjectId) return null;\n    if (!userIdToRemove) throw new Error(\"User ID to remove is required.\");\n    const memberUserIdString = userIdToRemove.toString();\n    try {\n        const { teams } = await getCollections();\n        const now = new Date();\n        // Find the team first to check if the user being removed is the owner\n        const team = await teams.findOne({\n            _id: teamObjectId\n        });\n        if (!team) return null; // Team not found\n        const memberToRemove = team.members.find((m)=>m.userId === memberUserIdString);\n        if (!memberToRemove) {\n            // console.log(\"Member not found in team.\");\n            return team; // Member not found, return current team state\n        }\n        // Prevent removing the owner\n        if (memberToRemove.role === 'owner') {\n            throw new Error(\"Cannot remove the team owner.\");\n        }\n        // Use $pull to remove the member by userId (string match)\n        const result = await teams.updateOne({\n            _id: teamObjectId\n        }, {\n            $pull: {\n                members: {\n                    userId: memberUserIdString\n                }\n            },\n            $set: {\n                updatedAt: now\n            }\n        });\n        if (result.modifiedCount === 0) {\n            // Should not happen if member was found, but handle gracefully\n            console.log(\"Pull operation did not modify the document.\");\n        }\n        const updatedTeam = await teams.findOne({\n            _id: teamObjectId\n        });\n        return updatedTeam;\n    } catch (error) {\n        console.error(\"Error removing team member:\", error);\n        if (error.message === \"Cannot remove the team owner.\") {\n            throw error;\n        }\n        throw new Error(\"Database error while removing team member.\");\n    }\n};\n// TODO: Implement updateTeamMember role if needed\n// --- Comment Functions ---\nconst getCommentsByPromptId = async (promptId)=>{\n    const promptObjectId = toObjectId(promptId);\n    if (!promptObjectId) return [];\n    try {\n        const { comments } = await getCollections();\n        // Fetch comments and sort by creation date (newest first)\n        const promptComments = await comments.find({\n            promptId: promptObjectId\n        }).sort({\n            createdAt: -1\n        }).toArray();\n        return promptComments;\n    } catch (error) {\n        console.error(\"Error fetching comments by prompt ID:\", error);\n        throw new Error(\"Database error while fetching comments.\");\n    }\n};\nconst createComment = async (commentData)=>{\n    if (!commentData.promptId || !commentData.userId || !commentData.content) {\n        throw new Error(\"Prompt ID, User ID, and content are required for comments.\");\n    }\n    const promptObjectId = toObjectId(commentData.promptId);\n    // Assuming userId is passed as string from session\n    const userIdString = commentData.userId.toString();\n    if (!promptObjectId) {\n        throw new Error(\"Invalid Prompt ID format for comment.\");\n    }\n    try {\n        const { comments, users } = await getCollections();\n        const now = new Date();\n        // Fetch commenter's name\n        let createdByName = 'User'; // Default\n        const commenterUser = await users.findOne({\n            _id: toObjectId(userIdString)\n        }, {\n            projection: {\n                name: 1\n            }\n        });\n        if (commenterUser && commenterUser.name) {\n            createdByName = commenterUser.name;\n        }\n        const newComment = {\n            promptId: promptObjectId,\n            userId: userIdString,\n            content: commentData.content,\n            createdBy: createdByName,\n            createdAt: now,\n            updatedAt: now\n        };\n        const result = await comments.insertOne(newComment);\n        return {\n            ...newComment,\n            _id: result.insertedId\n        };\n    } catch (error) {\n        console.error(\"Error creating comment:\", error);\n        throw new Error(\"Database error while creating comment.\");\n    }\n};\nconst updateComment = async (id, commentData)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return null;\n    if (!commentData.content) {\n        throw new Error(\"Comment content is required for update.\");\n    }\n    try {\n        const { comments } = await getCollections();\n        const updateDoc = {\n            $set: {\n                content: commentData.content,\n                updatedAt: new Date()\n            }\n        };\n        const result = await comments.updateOne({\n            _id: objectId\n        }, updateDoc);\n        if (result.matchedCount === 0) return null;\n        const updatedComment = await comments.findOne({\n            _id: objectId\n        });\n        return updatedComment;\n    } catch (error) {\n        console.error(\"Error updating comment:\", error);\n        throw new Error(\"Database error while updating comment.\");\n    }\n};\nconst deleteComment = async (id)=>{\n    const objectId = toObjectId(id);\n    if (!objectId) return false;\n    try {\n        const { comments } = await getCollections();\n        const result = await comments.deleteOne({\n            _id: objectId\n        });\n        return result.deletedCount > 0;\n    } catch (error) {\n        console.error(\"Error deleting comment:\", error);\n        throw new Error(\"Database error while deleting comment.\");\n    }\n}; // Remove the old in-memory data and initialization logic\n /*\nlet prompts = [];\nlet collections = [];\nlet users = [];\nlet teams = [];\nlet comments = [];\nlet promptIdCounter = 1;\nlet collectionIdCounter = 1;\nlet userIdCounter = 1;\nlet teamIdCounter = 1;\nlet commentIdCounter = 1;\n\n// All old functions like:\nexport const getAllPrompts = () => { ... };\n// ... etc.\n\n// Initialize with some sample data - in real app, this would be loaded from database\nexport const initializeDb = async () => { ... };\n\n// Call initialize when imported\n(async () => { ... })();\n*/ \n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./lib/mongodb.js":
/*!************************!*\
  !*** ./lib/mongodb.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabaseConnection: () => (/* binding */ closeDatabaseConnection),\n/* harmony export */   connectToDatabase: () => (/* binding */ connectToDatabase),\n/* harmony export */   getCollection: () => (/* binding */ getCollection)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst uri = process.env.MONGODB_URI;\nconst dbName = process.env.MONGODB_DB;\nif (!uri) {\n    throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\nif (!dbName) {\n    throw new Error('Please define the MONGODB_DB environment variable inside .env.local');\n}\nlet cachedClient = null;\nlet cachedDb = null;\n/**\r\n * Connects to the MongoDB database and returns the client and db instances.\r\n * Caches the connection to avoid reconnecting on every request in development.\r\n */ async function connectToDatabase() {\n    if (cachedClient && cachedDb) {\n        return {\n            client: cachedClient,\n            db: cachedDb\n        };\n    }\n    try {\n        const client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(uri, {\n        });\n        await client.connect();\n        const db = client.db(dbName);\n        console.log(\"Successfully connected to MongoDB.\");\n        cachedClient = client;\n        cachedDb = db;\n        return {\n            client,\n            db\n        };\n    } catch (error) {\n        console.error(\"Failed to connect to MongoDB\", error);\n        throw new Error(\"Could not connect to database.\");\n    }\n}\n// Optional: Helper to close the connection (useful for scripts or tests)\nasync function closeDatabaseConnection() {\n    if (cachedClient) {\n        await cachedClient.close();\n        cachedClient = null;\n        cachedDb = null;\n        console.log(\"MongoDB connection closed.\");\n    }\n}\n// Helper function to get collection references\nasync function getCollection(collectionName) {\n    const { db } = await connectToDatabase();\n    return db.collection(collectionName);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9tb25nb2RiLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNDO0FBRXRDLE1BQU1DLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0MsV0FBVztBQUNuQyxNQUFNQyxTQUFTSCxRQUFRQyxHQUFHLENBQUNHLFVBQVU7QUFFckMsSUFBSSxDQUFDTCxLQUFLO0lBQ1IsTUFBTSxJQUFJTSxNQUFNO0FBQ2xCO0FBRUEsSUFBSSxDQUFDRixRQUFRO0lBQ1gsTUFBTSxJQUFJRSxNQUFNO0FBQ2xCO0FBRUEsSUFBSUMsZUFBZTtBQUNuQixJQUFJQyxXQUFXO0FBRWY7OztDQUdDLEdBQ00sZUFBZUM7SUFDcEIsSUFBSUYsZ0JBQWdCQyxVQUFVO1FBQzVCLE9BQU87WUFBRUUsUUFBUUg7WUFBY0ksSUFBSUg7UUFBUztJQUM5QztJQUVBLElBQUk7UUFDRixNQUFNRSxTQUFTLElBQUlYLGdEQUFXQSxDQUFDQyxLQUFLO1FBR3BDO1FBRUEsTUFBTVUsT0FBT0UsT0FBTztRQUNwQixNQUFNRCxLQUFLRCxPQUFPQyxFQUFFLENBQUNQO1FBRXJCUyxRQUFRQyxHQUFHLENBQUM7UUFFWlAsZUFBZUc7UUFDZkYsV0FBV0c7UUFFWCxPQUFPO1lBQUVEO1lBQVFDO1FBQUc7SUFDdEIsRUFBRSxPQUFPSSxPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDLE1BQU0sSUFBSVQsTUFBTTtJQUNsQjtBQUNGO0FBRUEseUVBQXlFO0FBQ2xFLGVBQWVVO0lBQ3BCLElBQUlULGNBQWM7UUFDaEIsTUFBTUEsYUFBYVUsS0FBSztRQUN4QlYsZUFBZTtRQUNmQyxXQUFXO1FBQ1hLLFFBQVFDLEdBQUcsQ0FBQztJQUNkO0FBQ0Y7QUFFQSwrQ0FBK0M7QUFDeEMsZUFBZUksY0FBY0MsY0FBYztJQUNoRCxNQUFNLEVBQUVSLEVBQUUsRUFBRSxHQUFHLE1BQU1GO0lBQ3JCLE9BQU9FLEdBQUdTLFVBQVUsQ0FBQ0Q7QUFDdkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmF1ZGlcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9tcHRQcm9cXFByb21wdFByb1xcbGliXFxtb25nb2RiLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYic7XHJcblxyXG5jb25zdCB1cmkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSTtcclxuY29uc3QgZGJOYW1lID0gcHJvY2Vzcy5lbnYuTU9OR09EQl9EQjtcclxuXHJcbmlmICghdXJpKSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgZGVmaW5lIHRoZSBNT05HT0RCX1VSSSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpbnNpZGUgLmVudi5sb2NhbCcpO1xyXG59XHJcblxyXG5pZiAoIWRiTmFtZSkge1xyXG4gIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGRlZmluZSB0aGUgTU9OR09EQl9EQiBlbnZpcm9ubWVudCB2YXJpYWJsZSBpbnNpZGUgLmVudi5sb2NhbCcpO1xyXG59XHJcblxyXG5sZXQgY2FjaGVkQ2xpZW50ID0gbnVsbDtcclxubGV0IGNhY2hlZERiID0gbnVsbDtcclxuXHJcbi8qKlxyXG4gKiBDb25uZWN0cyB0byB0aGUgTW9uZ29EQiBkYXRhYmFzZSBhbmQgcmV0dXJucyB0aGUgY2xpZW50IGFuZCBkYiBpbnN0YW5jZXMuXHJcbiAqIENhY2hlcyB0aGUgY29ubmVjdGlvbiB0byBhdm9pZCByZWNvbm5lY3Rpbmcgb24gZXZlcnkgcmVxdWVzdCBpbiBkZXZlbG9wbWVudC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25uZWN0VG9EYXRhYmFzZSgpIHtcclxuICBpZiAoY2FjaGVkQ2xpZW50ICYmIGNhY2hlZERiKSB7XHJcbiAgICByZXR1cm4geyBjbGllbnQ6IGNhY2hlZENsaWVudCwgZGI6IGNhY2hlZERiIH07XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHVyaSwge1xyXG4gICAgICAvLyB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIC8vIERlcHJlY2F0ZWQgaW4gbmV3ZXIgdmVyc2lvbnNcclxuICAgICAgLy8gdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLCAvLyBEZXByZWNhdGVkIGluIG5ld2VyIHZlcnNpb25zXHJcbiAgICB9KTtcclxuXHJcbiAgICBhd2FpdCBjbGllbnQuY29ubmVjdCgpO1xyXG4gICAgY29uc3QgZGIgPSBjbGllbnQuZGIoZGJOYW1lKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8gTW9uZ29EQi5cIik7XHJcblxyXG4gICAgY2FjaGVkQ2xpZW50ID0gY2xpZW50O1xyXG4gICAgY2FjaGVkRGIgPSBkYjtcclxuXHJcbiAgICByZXR1cm4geyBjbGllbnQsIGRiIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY29ubmVjdCB0byBNb25nb0RCXCIsIGVycm9yKTtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBjb25uZWN0IHRvIGRhdGFiYXNlLlwiKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIE9wdGlvbmFsOiBIZWxwZXIgdG8gY2xvc2UgdGhlIGNvbm5lY3Rpb24gKHVzZWZ1bCBmb3Igc2NyaXB0cyBvciB0ZXN0cylcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlRGF0YWJhc2VDb25uZWN0aW9uKCkge1xyXG4gIGlmIChjYWNoZWRDbGllbnQpIHtcclxuICAgIGF3YWl0IGNhY2hlZENsaWVudC5jbG9zZSgpO1xyXG4gICAgY2FjaGVkQ2xpZW50ID0gbnVsbDtcclxuICAgIGNhY2hlZERiID0gbnVsbDtcclxuICAgIGNvbnNvbGUubG9nKFwiTW9uZ29EQiBjb25uZWN0aW9uIGNsb3NlZC5cIik7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGNvbGxlY3Rpb24gcmVmZXJlbmNlc1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSkge1xyXG4gIGNvbnN0IHsgZGIgfSA9IGF3YWl0IGNvbm5lY3RUb0RhdGFiYXNlKCk7XHJcbiAgcmV0dXJuIGRiLmNvbGxlY3Rpb24oY29sbGVjdGlvbk5hbWUpO1xyXG59ICJdLCJuYW1lcyI6WyJNb25nb0NsaWVudCIsInVyaSIsInByb2Nlc3MiLCJlbnYiLCJNT05HT0RCX1VSSSIsImRiTmFtZSIsIk1PTkdPREJfREIiLCJFcnJvciIsImNhY2hlZENsaWVudCIsImNhY2hlZERiIiwiY29ubmVjdFRvRGF0YWJhc2UiLCJjbGllbnQiLCJkYiIsImNvbm5lY3QiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJjbG9zZURhdGFiYXNlQ29ubmVjdGlvbiIsImNsb3NlIiwiZ2V0Q29sbGVjdGlvbiIsImNvbGxlY3Rpb25OYW1lIiwiY29sbGVjdGlvbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/mongodb.js\n");

/***/ }),

/***/ "(api-node)/./models/collection.js":
/*!******************************!*\
  !*** ./models/collection.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectionModel: () => (/* binding */ collectionModel),\n/* harmony export */   validateCollection: () => (/* binding */ validateCollection)\n/* harmony export */ });\n// Collection model structure\nconst collectionModel = {\n    id: Number,\n    name: String,\n    description: String,\n    prompts: Array,\n    createdAt: String,\n    updatedAt: String,\n    userId: String,\n    createdBy: String\n};\n// Validate collection data\nconst validateCollection = (data)=>{\n    const errors = {};\n    if (!data.name) {\n        errors.name = 'Name is required';\n    } else if (data.name.length < 3) {\n        errors.name = 'Name must be at least 3 characters';\n    } else if (data.name.length > 50) {\n        errors.name = 'Name must be less than 50 characters';\n    }\n    if (data.description && data.description.length > 200) {\n        errors.description = 'Description must be less than 200 characters';\n    }\n    if (data.prompts) {\n        if (!Array.isArray(data.prompts)) {\n            errors.prompts = 'Prompts must be an array';\n        } else {\n            for(let i = 0; i < data.prompts.length; i++){\n                const promptId = data.prompts[i];\n                if (typeof promptId !== 'number' && !Number.isInteger(parseInt(promptId))) {\n                    errors.prompts = 'All prompt IDs must be integers';\n                    break;\n                }\n            }\n        }\n    }\n    return {\n        isValid: Object.keys(errors).length === 0,\n        errors\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL21vZGVscy9jb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkJBQTZCO0FBQ3RCLE1BQU1BLGtCQUFrQjtJQUM3QkMsSUFBSUM7SUFDSkMsTUFBTUM7SUFDTkMsYUFBYUQ7SUFDYkUsU0FBU0M7SUFDVEMsV0FBV0o7SUFDWEssV0FBV0w7SUFDWE0sUUFBUU47SUFDUk8sV0FBV1A7QUFDYixFQUFFO0FBRUYsMkJBQTJCO0FBQ3BCLE1BQU1RLHFCQUFxQixDQUFDQztJQUNqQyxNQUFNQyxTQUFTLENBQUM7SUFFaEIsSUFBSSxDQUFDRCxLQUFLVixJQUFJLEVBQUU7UUFDZFcsT0FBT1gsSUFBSSxHQUFHO0lBQ2hCLE9BQU8sSUFBSVUsS0FBS1YsSUFBSSxDQUFDWSxNQUFNLEdBQUcsR0FBRztRQUMvQkQsT0FBT1gsSUFBSSxHQUFHO0lBQ2hCLE9BQU8sSUFBSVUsS0FBS1YsSUFBSSxDQUFDWSxNQUFNLEdBQUcsSUFBSTtRQUNoQ0QsT0FBT1gsSUFBSSxHQUFHO0lBQ2hCO0lBRUEsSUFBSVUsS0FBS1IsV0FBVyxJQUFJUSxLQUFLUixXQUFXLENBQUNVLE1BQU0sR0FBRyxLQUFLO1FBQ3JERCxPQUFPVCxXQUFXLEdBQUc7SUFDdkI7SUFFQSxJQUFJUSxLQUFLUCxPQUFPLEVBQUU7UUFDaEIsSUFBSSxDQUFDQyxNQUFNUyxPQUFPLENBQUNILEtBQUtQLE9BQU8sR0FBRztZQUNoQ1EsT0FBT1IsT0FBTyxHQUFHO1FBQ25CLE9BQU87WUFDTCxJQUFLLElBQUlXLElBQUksR0FBR0EsSUFBSUosS0FBS1AsT0FBTyxDQUFDUyxNQUFNLEVBQUVFLElBQUs7Z0JBQzVDLE1BQU1DLFdBQVdMLEtBQUtQLE9BQU8sQ0FBQ1csRUFBRTtnQkFDaEMsSUFBSSxPQUFPQyxhQUFhLFlBQVksQ0FBQ2hCLE9BQU9pQixTQUFTLENBQUNDLFNBQVNGLFlBQVk7b0JBQ3pFSixPQUFPUixPQUFPLEdBQUc7b0JBQ2pCO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBRUEsT0FBTztRQUNMZSxTQUFTQyxPQUFPQyxJQUFJLENBQUNULFFBQVFDLE1BQU0sS0FBSztRQUN4Q0Q7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmF1ZGlcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9tcHRQcm9cXFByb21wdFByb1xcbW9kZWxzXFxjb2xsZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvbGxlY3Rpb24gbW9kZWwgc3RydWN0dXJlXG5leHBvcnQgY29uc3QgY29sbGVjdGlvbk1vZGVsID0ge1xuICBpZDogTnVtYmVyLFxuICBuYW1lOiBTdHJpbmcsXG4gIGRlc2NyaXB0aW9uOiBTdHJpbmcsXG4gIHByb21wdHM6IEFycmF5LCAvLyBvZiBwcm9tcHQgSURzXG4gIGNyZWF0ZWRBdDogU3RyaW5nLCAvLyBJU08gZGF0ZSBzdHJpbmdcbiAgdXBkYXRlZEF0OiBTdHJpbmcsIC8vIElTTyBkYXRlIHN0cmluZ1xuICB1c2VySWQ6IFN0cmluZywgLy8gSUQgb2YgdGhlIHVzZXIgd2hvIGNyZWF0ZWQgdGhlIGNvbGxlY3Rpb25cbiAgY3JlYXRlZEJ5OiBTdHJpbmcsIC8vIE5hbWUgb2YgdGhlIHVzZXIgd2hvIGNyZWF0ZWQgdGhlIGNvbGxlY3Rpb25cbn07XG5cbi8vIFZhbGlkYXRlIGNvbGxlY3Rpb24gZGF0YVxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlQ29sbGVjdGlvbiA9IChkYXRhKSA9PiB7XG4gIGNvbnN0IGVycm9ycyA9IHt9O1xuICBcbiAgaWYgKCFkYXRhLm5hbWUpIHtcbiAgICBlcnJvcnMubmFtZSA9ICdOYW1lIGlzIHJlcXVpcmVkJztcbiAgfSBlbHNlIGlmIChkYXRhLm5hbWUubGVuZ3RoIDwgMykge1xuICAgIGVycm9ycy5uYW1lID0gJ05hbWUgbXVzdCBiZSBhdCBsZWFzdCAzIGNoYXJhY3RlcnMnO1xuICB9IGVsc2UgaWYgKGRhdGEubmFtZS5sZW5ndGggPiA1MCkge1xuICAgIGVycm9ycy5uYW1lID0gJ05hbWUgbXVzdCBiZSBsZXNzIHRoYW4gNTAgY2hhcmFjdGVycyc7XG4gIH1cbiAgXG4gIGlmIChkYXRhLmRlc2NyaXB0aW9uICYmIGRhdGEuZGVzY3JpcHRpb24ubGVuZ3RoID4gMjAwKSB7XG4gICAgZXJyb3JzLmRlc2NyaXB0aW9uID0gJ0Rlc2NyaXB0aW9uIG11c3QgYmUgbGVzcyB0aGFuIDIwMCBjaGFyYWN0ZXJzJztcbiAgfVxuICBcbiAgaWYgKGRhdGEucHJvbXB0cykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhLnByb21wdHMpKSB7XG4gICAgICBlcnJvcnMucHJvbXB0cyA9ICdQcm9tcHRzIG11c3QgYmUgYW4gYXJyYXknO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEucHJvbXB0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwcm9tcHRJZCA9IGRhdGEucHJvbXB0c1tpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9tcHRJZCAhPT0gJ251bWJlcicgJiYgIU51bWJlci5pc0ludGVnZXIocGFyc2VJbnQocHJvbXB0SWQpKSkge1xuICAgICAgICAgIGVycm9ycy5wcm9tcHRzID0gJ0FsbCBwcm9tcHQgSURzIG11c3QgYmUgaW50ZWdlcnMnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4ge1xuICAgIGlzVmFsaWQ6IE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoID09PSAwLFxuICAgIGVycm9yc1xuICB9O1xufTtcbiJdLCJuYW1lcyI6WyJjb2xsZWN0aW9uTW9kZWwiLCJpZCIsIk51bWJlciIsIm5hbWUiLCJTdHJpbmciLCJkZXNjcmlwdGlvbiIsInByb21wdHMiLCJBcnJheSIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsInVzZXJJZCIsImNyZWF0ZWRCeSIsInZhbGlkYXRlQ29sbGVjdGlvbiIsImRhdGEiLCJlcnJvcnMiLCJsZW5ndGgiLCJpc0FycmF5IiwiaSIsInByb21wdElkIiwiaXNJbnRlZ2VyIiwicGFyc2VJbnQiLCJpc1ZhbGlkIiwiT2JqZWN0Iiwia2V5cyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./models/collection.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcollections&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ccollections%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcollections&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ccollections%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_collections_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\collections\\index.js */ \"(api-node)/./pages/api/collections/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_collections_index_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_collections_index_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_collections_index_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_collections_index_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/collections\",\n        pathname: \"/api/collections\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_collections_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGY29sbGVjdGlvbnMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2NvbGxlY3Rpb25zJTVDaW5kZXguanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDZ0U7QUFDaEU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDREQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw0REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxjb2xsZWN0aW9uc1xcXFxpbmRleC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCAnZGVmYXVsdCcpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgJ2NvbmZpZycpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY29sbGVjdGlvbnNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jb2xsZWN0aW9uc1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcollections&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ccollections%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/collections/index.js":
/*!****************************************!*\
  !*** ./pages/api/collections/index.js ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/db */ \"(api-node)/./lib/db.js\");\n/* harmony import */ var _models_collection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../models/collection */ \"(api-node)/./models/collection.js\");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/auth */ \"(api-node)/./lib/auth.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nasync function handler(req, res) {\n    switch(req.method){\n        case 'GET':\n            return getCollections(req, res);\n        case 'POST':\n            return addCollection(req, res);\n        default:\n            return res.status(405).json({\n                message: 'Method not allowed'\n            });\n    }\n}\n// Protect POST, PUT, DELETE methods\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_lib_auth__WEBPACK_IMPORTED_MODULE_2__.withAuthForMethods)(handler));\nasync function getCollections(req, res) {\n    try {\n        // Add await since getAllCollections is now async\n        const collections = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.getAllCollections)();\n        // Check if collections is undefined or null and provide a fallback\n        if (!collections) {\n            return res.status(200).json([]);\n        }\n        // Map MongoDB _id to id for frontend compatibility\n        const mappedCollections = collections.map((collection)=>({\n                id: collection._id.toString(),\n                ...collection,\n                _id: undefined // Remove _id to avoid duplication\n            }));\n        return res.status(200).json(mappedCollections);\n    } catch (error) {\n        console.error('Error getting collections:', error);\n        return res.status(500).json({\n            message: 'Internal server error'\n        });\n    }\n}\nasync function addCollection(req, res) {\n    try {\n        const { name, description } = req.body;\n        // Validate the collection data\n        const validation = (0,_models_collection__WEBPACK_IMPORTED_MODULE_1__.validateCollection)({\n            name,\n            description\n        });\n        if (!validation.isValid) {\n            return res.status(400).json({\n                errors: validation.errors\n            });\n        }\n        // Add user information from the session (NextAuth)\n        const userId = req.session?.user?.id;\n        const userName = req.session?.user?.name || 'Anonymous';\n        // Add await since createCollection is now async\n        const newCollection = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.createCollection)({\n            name,\n            description,\n            userId,\n            createdBy: userName\n        });\n        return res.status(201).json(newCollection);\n    } catch (error) {\n        console.error('Error adding collection:', error);\n        return res.status(500).json({\n            message: 'Internal server error'\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS9jb2xsZWN0aW9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXNFO0FBQ047QUFDVDtBQUV2RCxlQUFlSSxRQUFRQyxHQUFHLEVBQUVDLEdBQUc7SUFDN0IsT0FBUUQsSUFBSUUsTUFBTTtRQUNoQixLQUFLO1lBQ0gsT0FBT0MsZUFBZUgsS0FBS0M7UUFDN0IsS0FBSztZQUNILE9BQU9HLGNBQWNKLEtBQUtDO1FBQzVCO1lBQ0UsT0FBT0EsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsU0FBUztZQUFxQjtJQUNoRTtBQUNGO0FBRUEsb0NBQW9DO0FBQ3BDLGlFQUFlVCw2REFBa0JBLENBQUNDLFFBQVFBLEVBQUM7QUFFM0MsZUFBZUksZUFBZUgsR0FBRyxFQUFFQyxHQUFHO0lBQ3BDLElBQUk7UUFDRixpREFBaUQ7UUFDakQsTUFBTU8sY0FBYyxNQUFNYiwwREFBaUJBO1FBRTNDLG1FQUFtRTtRQUNuRSxJQUFJLENBQUNhLGFBQWE7WUFDaEIsT0FBT1AsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQyxFQUFFO1FBQ2hDO1FBRUEsbURBQW1EO1FBQ25ELE1BQU1HLG9CQUFvQkQsWUFBWUUsR0FBRyxDQUFDQyxDQUFBQSxhQUFlO2dCQUN2REMsSUFBSUQsV0FBV0UsR0FBRyxDQUFDQyxRQUFRO2dCQUMzQixHQUFHSCxVQUFVO2dCQUNiRSxLQUFLRSxVQUFVLGtDQUFrQztZQUNuRDtRQUVBLE9BQU9kLElBQUlJLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUNHO0lBQzlCLEVBQUUsT0FBT08sT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsOEJBQThCQTtRQUM1QyxPQUFPZixJQUFJSSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLFNBQVM7UUFBd0I7SUFDakU7QUFDRjtBQUVBLGVBQWVILGNBQWNKLEdBQUcsRUFBRUMsR0FBRztJQUNuQyxJQUFJO1FBQ0YsTUFBTSxFQUFFaUIsSUFBSSxFQUFFQyxXQUFXLEVBQUUsR0FBR25CLElBQUlvQixJQUFJO1FBRXRDLCtCQUErQjtRQUMvQixNQUFNQyxhQUFheEIsc0VBQWtCQSxDQUFDO1lBQUVxQjtZQUFNQztRQUFZO1FBRTFELElBQUksQ0FBQ0UsV0FBV0MsT0FBTyxFQUFFO1lBQ3ZCLE9BQU9yQixJQUFJSSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUFFaUIsUUFBUUYsV0FBV0UsTUFBTTtZQUFDO1FBQzFEO1FBRUEsbURBQW1EO1FBQ25ELE1BQU1DLFNBQVN4QixJQUFJeUIsT0FBTyxFQUFFQyxNQUFNZDtRQUNsQyxNQUFNZSxXQUFXM0IsSUFBSXlCLE9BQU8sRUFBRUMsTUFBTVIsUUFBUTtRQUU1QyxnREFBZ0Q7UUFDaEQsTUFBTVUsZ0JBQWdCLE1BQU1oQyx5REFBZ0JBLENBQUM7WUFDM0NzQjtZQUNBQztZQUNBSztZQUNBSyxXQUFXRjtRQUNiO1FBRUEsT0FBTzFCLElBQUlJLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUNzQjtJQUM5QixFQUFFLE9BQU9aLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLDRCQUE0QkE7UUFDMUMsT0FBT2YsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxTQUFTO1FBQXdCO0lBQ2pFO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmF1ZGlcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9tcHRQcm9cXFByb21wdFByb1xccGFnZXNcXGFwaVxcY29sbGVjdGlvbnNcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFsbENvbGxlY3Rpb25zLCBjcmVhdGVDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vbGliL2RiJztcbmltcG9ydCB7IHZhbGlkYXRlQ29sbGVjdGlvbiB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9jb2xsZWN0aW9uJztcbmltcG9ydCB7IHdpdGhBdXRoRm9yTWV0aG9kcyB9IGZyb20gJy4uLy4uLy4uL2xpYi9hdXRoJztcblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xuICBzd2l0Y2ggKHJlcS5tZXRob2QpIHtcbiAgICBjYXNlICdHRVQnOlxuICAgICAgcmV0dXJuIGdldENvbGxlY3Rpb25zKHJlcSwgcmVzKTtcbiAgICBjYXNlICdQT1NUJzpcbiAgICAgIHJldHVybiBhZGRDb2xsZWN0aW9uKHJlcSwgcmVzKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgbWVzc2FnZTogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XG4gIH1cbn1cblxuLy8gUHJvdGVjdCBQT1NULCBQVVQsIERFTEVURSBtZXRob2RzXG5leHBvcnQgZGVmYXVsdCB3aXRoQXV0aEZvck1ldGhvZHMoaGFuZGxlcik7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbGxlY3Rpb25zKHJlcSwgcmVzKSB7XG4gIHRyeSB7XG4gICAgLy8gQWRkIGF3YWl0IHNpbmNlIGdldEFsbENvbGxlY3Rpb25zIGlzIG5vdyBhc3luY1xuICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gYXdhaXQgZ2V0QWxsQ29sbGVjdGlvbnMoKTtcbiAgICBcbiAgICAvLyBDaGVjayBpZiBjb2xsZWN0aW9ucyBpcyB1bmRlZmluZWQgb3IgbnVsbCBhbmQgcHJvdmlkZSBhIGZhbGxiYWNrXG4gICAgaWYgKCFjb2xsZWN0aW9ucykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKFtdKTtcbiAgICB9XG4gICAgXG4gICAgLy8gTWFwIE1vbmdvREIgX2lkIHRvIGlkIGZvciBmcm9udGVuZCBjb21wYXRpYmlsaXR5XG4gICAgY29uc3QgbWFwcGVkQ29sbGVjdGlvbnMgPSBjb2xsZWN0aW9ucy5tYXAoY29sbGVjdGlvbiA9PiAoe1xuICAgICAgaWQ6IGNvbGxlY3Rpb24uX2lkLnRvU3RyaW5nKCksXG4gICAgICAuLi5jb2xsZWN0aW9uLFxuICAgICAgX2lkOiB1bmRlZmluZWQgLy8gUmVtb3ZlIF9pZCB0byBhdm9pZCBkdXBsaWNhdGlvblxuICAgIH0pKTtcbiAgICBcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24obWFwcGVkQ29sbGVjdGlvbnMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgY29sbGVjdGlvbnM6JywgZXJyb3IpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFkZENvbGxlY3Rpb24ocmVxLCByZXMpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uIH0gPSByZXEuYm9keTtcbiAgICBcbiAgICAvLyBWYWxpZGF0ZSB0aGUgY29sbGVjdGlvbiBkYXRhXG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IHZhbGlkYXRlQ29sbGVjdGlvbih7IG5hbWUsIGRlc2NyaXB0aW9uIH0pO1xuICAgIFxuICAgIGlmICghdmFsaWRhdGlvbi5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcnM6IHZhbGlkYXRpb24uZXJyb3JzIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBBZGQgdXNlciBpbmZvcm1hdGlvbiBmcm9tIHRoZSBzZXNzaW9uIChOZXh0QXV0aClcbiAgICBjb25zdCB1c2VySWQgPSByZXEuc2Vzc2lvbj8udXNlcj8uaWQ7XG4gICAgY29uc3QgdXNlck5hbWUgPSByZXEuc2Vzc2lvbj8udXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJztcbiAgICBcbiAgICAvLyBBZGQgYXdhaXQgc2luY2UgY3JlYXRlQ29sbGVjdGlvbiBpcyBub3cgYXN5bmNcbiAgICBjb25zdCBuZXdDb2xsZWN0aW9uID0gYXdhaXQgY3JlYXRlQ29sbGVjdGlvbih7IFxuICAgICAgbmFtZSwgXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIHVzZXJJZCxcbiAgICAgIGNyZWF0ZWRCeTogdXNlck5hbWVcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24obmV3Q29sbGVjdGlvbik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgYWRkaW5nIGNvbGxlY3Rpb246JywgZXJyb3IpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsiZ2V0QWxsQ29sbGVjdGlvbnMiLCJjcmVhdGVDb2xsZWN0aW9uIiwidmFsaWRhdGVDb2xsZWN0aW9uIiwid2l0aEF1dGhGb3JNZXRob2RzIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsImdldENvbGxlY3Rpb25zIiwiYWRkQ29sbGVjdGlvbiIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwiY29sbGVjdGlvbnMiLCJtYXBwZWRDb2xsZWN0aW9ucyIsIm1hcCIsImNvbGxlY3Rpb24iLCJpZCIsIl9pZCIsInRvU3RyaW5nIiwidW5kZWZpbmVkIiwiZXJyb3IiLCJjb25zb2xlIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiYm9keSIsInZhbGlkYXRpb24iLCJpc1ZhbGlkIiwiZXJyb3JzIiwidXNlcklkIiwic2Vzc2lvbiIsInVzZXIiLCJ1c2VyTmFtZSIsIm5ld0NvbGxlY3Rpb24iLCJjcmVhdGVkQnkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/collections/index.js\n");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = import("bcryptjs");;

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next-auth/jwt":
/*!********************************!*\
  !*** external "next-auth/jwt" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("next-auth/jwt");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcollections&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ccollections%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();